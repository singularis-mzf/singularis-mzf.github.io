<!doctype html>
<html lang="cs">
<head profile="http://www.w3.org/2005/10/profile">
<meta charset="UTF-8">

<title>Perl: základy − Linux: Kniha kouzel</title>

<link rel="stylesheet" type="text/css" href="lkk-20210117.css">
<link rel="alternate stylesheet" type="text/css" href="lkk-20210117-vk-svetly.css" title="Vysoký kontrast: světlá varianta">
<link rel="alternate stylesheet" type="text/css" href="lkk-20210117-vk-tmavy.css" title="Vysoký kontrast: tmavá varianta">
<link rel="alternate stylesheet" type="text/css" href="lkk-20210117-svetly.css" title="Světlý motiv">
<link rel="icon" type="image/png" href="obrazky/favicon.png">
</head>
<body>
<div id="nahore"><div id="okno">
<header>
<span class="vlevo"><a href="index.htm"><img src="obrazky/favicon.png" width="16" height="16" alt=""></a> Linux: Kniha kouzel, vanilková příchuť 2.4, L. L. (17. ledna 2021)</span>
<span class="vpravo"><span class="ico1"></span><span class="ico2"></span><span class="ico3"></span></span>
</header>
<nav class="menuokna">
<a href="#menuosnova" class="menu"><span class="prvnipismeno">O</span>snova</a>
<a href="#menukapitoly" class="menu"><span class="prvnipismeno">K</span>apitoly</a>
<a href="#menustitky" class="menu"><span class="prvnipismeno">Š</span>títky</a>
<a href="#menunapoveda" class="menu"><span class="prvnipismeno">N</span>ápověda</a>
<a href="odkazy.htm" rel="prev" title="7. Pevné a symbolické odkazy" accesskey="p" class="predchozi">Předchozí&nbsp;kapitola</a>
<a href="index.htm" class="prehled"><span class="prvnipismeno">P</span>řehled kapitol</a>
<a href="prace-s-archivy.htm" rel="next" title="9. Práce s archivy" accesskey="n" class="nasledujici">Následující&nbsp;kapitola</a>
</nav>

<div class="slogan-veskera-moc">Veškerá moc příkazové řádky/příkazového řádku přehledně, pro začátečníky i&nbsp;pokročilé</div>

<!--
<nav class="horni">
<div class="slogan">Veškerá moc příkazové řádky/příkazového řádku přehledně, pro začátečníky i&nbsp;pokročilé</div>
<span class="prev">
<a href="odkazy.htm" rel="prev" title="7. Pevné a symbolické odkazy" accesskey="p">Předchozí&nbsp;kapitola</a>&nbsp;|
</span><a href="index.htm" accesskey="i">Přehled</a><span class="next"><!- -
- ->&nbsp;| <a href="prace-s-archivy.htm" rel="next" title="9. Práce s archivy" accesskey="n">Následující&nbsp;kapitola</a>
</span>
</nav>
-->


<article>

<h1 class="kapitola">8. <img src="obrazky/ik/perl-zaklady.png" alt="" width="64" height="64"> Perl: základy</h1>
<div class="stitky"><a href="x-stitky.htm#sperl">Perl</a>
<a href="x-stitky.htm#sprogram">program</a>
<a href="x-stitky.htm#sprogramovani">programování</a>
<a href="x-stitky.htm#ssyntaxe">syntaxe</a>
<a href="x-stitky.htm#szpracovanitextu">zpracování textu</a>
</div>
<h2 id="cast1"><a href="#cast1"><span class="cislo">1.</span> Úvod</a></h2>
<p class="ponadpisu">
Perl je skriptovací jazyk určený především pro zpracování textu.
Mezi programátory je velmi oblíbený a rozšířený, má však špatnou pověst,
protože je multisyntaktický a pro neodborníka velmi špatně čitelný.
Přesto je velmi užitečný a při využití jen malé podmnožiny jeho vlastností
je snadné v něm začít programovat.
</p><p>
Perl je ale také zákeřný programovací jazyk, v němž je podmínka „if (false)“
splněna, funkce length() aplikovaná na osmnáctiprvkové pole vrací
hodnotu 2, připojovaný zdrojový soubor musí končit příkazem „1;“,
proměnné se nejčastěji deklarují klíčovým slovem „my“
a příkaz náhrady „s/.$/@/“ provedený nad řetězcem &quot;X\n\n\n&quot;
nikdy neskončí výsledkem &quot;X\n\n@&quot; jako v GNU Sedu,
ale jedním z výsledků &quot;X\n\n\n&quot; (bez modifikátoru),
&quot;X\n@\n&quot; (s modifikátorem „s“) nebo „X\n@@“ (s modifikátory „gs“);
ke stejnému chování jako v Sedu ho však nedonutíte.
</p><p>
Kapitoly vanilkové příchuti Linuxu: Knihy kouzel zaměřené na Perl
se omezují na bezpečnou podmnožinu jeho funkcionality, čímž vám umožní začít
z jeho moci těžit velmi rychle a s minimem nutných znalostí a vyhýbat se
přitom většině zákeřných pastí. (Pronikat do „hlubin Perlu“ můžete později.
Nejdřív naprogramujte, co potřebujete.)
</p><p>
Tato kapitola nepokrývá moduly, objektově orientované programování
a velkou část užitečných knihovních funkcí (např. práci s databázemi).
</p><p>
<i>Poznámka:</i> Všechna zaklínadla v této kapitole předpokládají,
že máte nainstalovaný balíček DEB Linuxu: Knihy kouzel
a skripty budete spouštět výhradně příkazem „lkk perl“.
Informace, jak takové skripty zprovoznit bez něj, najdete v repozitáři
Linuxu: Knihy kouzel na GitHubu.
</p>

<h2 id="cast2"><a href="#cast2"><span class="cislo">2.</span> Definice</a></h2>
<ul><li><b>Skalár</b> je dynamicky typovaná hodnota, která může být řetězec, číslo, ukazatel na nějaký objekt nebo zvláštní <b>nehodnota undef</b>. Výchozí hodnotou skalárů je undef. Jednotlivé skaláry se symbolizují znakem „$“.
</li><li><b>Pole</b> (array, list) je uspořádaný kontejner skalárů indexovaný celými čísly 0, 1, 2 atd. Pole se symbolizují znakem „@“ a pro přístup k jejich prvkům se používá index (či seznam indexů) v hranatých závorkách „[]“. (Na rozdíl od GNU awk, v Perlu se prvky polí číslují vždy od nuly.) Výchozí hodnotou je prázdné pole.
</li><li><b>Asociativní pole</b> (hash) je neuspořádaný kontejner skalárů (<b>hodnot</b>) indexovaný libovolnými řetězci (<b>klíči</b>). Symbolizuje se znakem „%“. Přístup k prvkům pole se vyznačuje použitím klíče (či seznamu klíčů) ve složených závorkách „{}“. Asociativní pole se inicializují poli či seznamy se sudým počtem prvků, kde se první prvek každé dvojice interpretuje jako klíč a druhý jako odpovídající hodnota. V seznamech se pak asociativní pole na takový seznam rozloží. Výchozí hodnotou je prázdné asociativní pole.
</li></ul><p class="ponadpisu">
Je v pořádku mít vedle sebe proměnné „$x“, „@x“ a „%x“ a funkci „x()“, jsou to čtyři nezávislé věci. Konstanty však sdílejí „jmenný prostor“ s funkcemi.
</p>
<ul><li><b>Ukazatel</b> (reference, v češtině obvykle nazývaný „odkaz“) je skalár, který odkazuje na nějaký objekt v paměti (skalár, pole, funkci, regulární výraz atd.). Přístup k odkazovanému objektu se získává <b>dereferencí</b> ukazatele. Operace, při kterých ukazatel není výslovně dereferencován, se týkají ukazatele jako takového.
</li><li><b>Seznam</b> je dočasný objekt příbuzný poli; zadává se výčtem prvků v kulatých závorkách, např. „(1, $b, 3)“. Kulaté závorky se nepoužijí, pokud je seznam bezprostředně obalen dalšími kulatými nebo hranatými závorkami. V téměř všech kontextech je seznam zaměnitelný s polem — kde se očekává pole, můžete uvést seznam, a naopak kde se očekává seznam, můžete uvést pole.
</li><li>Důležitou vlastností seznamů je <b>zplošťování</b> — když v seznamu uvedete vnořený seznam, pole nebo asociativní pole, to se obvykle rozvine na všechny svoje prvky v odpovídajícím pořadí, jako byste je uvedl/a přímo. Nespoléhejte se však na zplošťování při volání systémových a knihovních funkcí (může být ovlivněno tzv. prototypem funkce) a v seznamech stojících na levé straně operátoru přiřazení (tam funguje trochu jinak).
</li><li><b>Proud</b> je objekt reprezentující soubor na disku nebo rouru vedoucí do jiného procesu. Umožňuje číst či zapisovat data, a to v textovém nebo binárním režimu.
</li><li><b>Řetězec bajtů</b> je každý řetězec, který obsahuje jen znaky s kódovou hodnotou 0 až 255. Takový řetězec může být bez konverze zapsán do souboru v binárním režimu. Všechny řetězce načtené v binárním režimu jsou řetězce bajtů.
</li></ul>
<h2 id="cast3" class="zaklinadla"><a href="#cast3"><span class="cislo">3.</span> Zaklínadla: Základní</a></h2>

<h3 id="cast3x1"><span><a href="#cast3x1" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 1 (Proměnné a konstanty)"><sup>3/</sup>1 Proměnné a konstanty</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z420467097"><span><a href="#z420467097">⧎</a></span></span><b>deklarovat</b> místní proměnnou typu skalár/pole/asociativní pole<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc1" id="kapperlzakladyppcr1" title="„Místní proměnná“ je viditelná v bloku, kde je deklarována. Inicializuje se při každém průchodu znovu a opuštěním bloku zaniká. Místní proměnná není nikdy viditelná z jiných zdrojových souborů.">(1)</a></sup></div><div class="radky">
<div class="radekzaklinadla">my $<i class="dopln">identifikátor</i> <span class="volznak">[</span>= <i class="dopln">inicializace</i><span class="volznak">]</span>;</div>
<div class="radekzaklinadla">my @<i class="dopln">identifikátor</i> <span class="volznak">[</span>= <i class="dopln">inicializace</i><span class="volznak">]</span>;</div>
<div class="radekzaklinadla">my %<i class="dopln">identifikátor</i> <span class="volznak">[</span>= <i class="dopln">inicializace</i><span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2126494316"><span><a href="#z2126494316">╎</a></span></span>deklarovat <b>trvanlivou</b> proměnnou<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc2" id="kapperlzakladyppcr2" title="„Trvanlivá proměnná“ je stejně jako místní proměnná viditelná v bloku (popř. zdrojovém souboru), kde je deklarována. Inicializuje se však pouze při prvním průchodu a trvá až do ukončení programu.">(2)</a></sup></div><div class="radky">
<div class="radekzaklinadla">state <i class="dopln">$@%</i><i class="dopln">identifikátor</i> <span class="volznak">[</span>= <i class="dopln">inicializace</i><span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z978629862"><span><a href="#z978629862">⪕</a></span></span>deklarovat globální proměnnou<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc3" id="kapperlzakladyppcr3" title="„Globální proměnná“ je viditelná v celém programu (ve všech zdrojových souborech, a to i v případě, že je deklarovaná uvnitř definice funkce), inicializuje se při prvním průchodu a trvá až do ukončení programu.">(3)</a></sup></div><div class="radky">
<div class="radekzaklinadla">our <i class="dopln">$@%</i><i class="dopln">identifikátor</i> <span class="volznak">[</span>= <i class="dopln">inicializace</i><span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1827406359"><span><a href="#z1827406359">⣬</a></span></span>deklarovat <b>konstantu</b> typu skalár/seznam<span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc4" id="kapperlzakladyppcr4" title="Poznámka: kvůli omezením Perlu je každá konstanta globální v rámci jmenného prostoru a viditelná i z ostatních zdrojových souborů. V její inicializaci může být obecný výraz, ale bude vyhodnocován v době překladu, takže je omezeno, co může obsahovat. Může však obsahovat již dříve definované konstanty.">(4)</a></sup></div><div class="radky">
<div class="radekzaklinadla">use constant <i class="dopln">identifikátor</i> =&gt; <i class="dopln">inicializace</i>;</div>
<div class="radekzaklinadla">use constant <i class="dopln">identifikátor</i> =&gt; (<i class="dopln">inicializace</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z543560619"><span><a href="#z543560619">▙</a></span></span>do konce bloku <b>překrýt</b> globální proměnnou<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc5" id="kapperlzakladyppcr5" title="Příkaz „local“ způsobí, že v paměti vznikne nový objekt příslušného typu a uvedená globální proměnná se na něj dočasně „přesměruje“, takže veškeré odkazy na danou globální proměnnou (i uvnitř volaných knihovních funkcí) budou přistupovat k novému objektu místo k tomu původnímu. Do původního stavu se proměnná vrátí po opuštění bloku kódu, v němž byla deklarací „local“ překryta.">(5)</a></sup></div><div class="radky">
<div class="radekzaklinadla">local <i class="dopln">$@%</i><i class="dopln">identifikátor</i> = <i class="dopln">nová-hodnota</i>;</div>
</div></div>

<h3 id="cast3x2"><span><a href="#cast3x2" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 2 (Skaláry a undef)"><sup>3/</sup>2 Skaláry a undef</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1833412480"><span><a href="#z1833412480">⋧</a></span></span>má skalár hodnotu? (tzn. <b>není undef</b>)<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">defined(<i class="dopln">$skalár</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1322676153"><span><a href="#z1322676153">‣</a></span></span><b>přečíst</b> skalární proměnnou<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">$<i class="dopln">identifikátor</i></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1978765547"><span><a href="#z1978765547">❉</a></span></span><b>přiřadit</b> skalární proměnné hodnotu/undef<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">$<i class="dopln">identifikátor</i> = <i class="dopln">hodnota</i></div>
<div class="radekzaklinadla">$<i class="dopln">identifikátor</i> = undef</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2034358595"><span><a href="#z2034358595">䷭</a></span></span>přečíst skalární <b>konstantu</b> (obecně/příklady)<span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc6" id="kapperlzakladyppcr6" title="Závorky kolem identifikátoru konstanty můžete vynechat tehdy, když je obalený jinými kulatými závorkami; nesmíte je vynechat v případě, že je obalený složenými či hranatými závorkami!">(6)</a></sup></div><div class="radky">
<div class="radekzaklinadla">(<i class="dopln">identifikátor</i>)</div>
<div class="radekzaklinadla">printf(&quot;Hodnota konstanty je: %d\n&quot;, (konstanta));</div>
<div class="radekzaklinadla">print(konstanta);</div>
<div class="radekzaklinadla">printf(&quot;V asoc. poli je %s\n&quot;, $asocPole{(konstanta)});</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1293113587"><span><a href="#z1293113587">╇</a></span></span>zjistit <b>typ</b> skaláru<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc7" id="kapperlzakladyppcr7" title="Vracené typy jsou: u = undef, s = číslo či řetězec, S = ukazatel na skalár, A = ukazatel na pole, H = ukazatel na asociativní pole, C = ukazatel na funkci („kód“), R = ukazatel na regulární výraz, F = ukazatel na vstupně/výstupní proud a &quot;&lt;Název::Třídy&gt;&quot; pro ukazatele na objekty tříd (dosadí se název třídy).">(7)</a></sup></div><div class="radky">
<div class="radekzaklinadla">typy(<i class="dopln">$skalár</i>)<span class="prikladhodnoty">⊨ &quot;s&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z575114999"><span><a href="#z575114999">╖</a></span></span>vrátit první ze skalárů, který má hodnotu<span class="cislo">#6 </span><sup><a href="#kapperlzakladyppc8" id="kapperlzakladyppcr8" title="Operátor „//“ se vyhodnocuje postupně. To znamená, že pokud výraz na jeho levé straně není undef, výraz na pravé straně se již nevyhodnotí. To umožňuje ho využít v kombinaci např. s funkcí „die()“.">(8)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">skalár</i> <span class="volznak">[</span>// <i class="dopln">další-skalár</i><span class="volznak">]</span><span class="tritecky"></span></div>
</div></div>

<h3 id="cast3x3"><span><a href="#cast3x3" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 3 (Volání funkcí)"><sup>3/</sup>3 Volání funkcí</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1246857247"><span><a href="#z1246857247">⣃</a></span></span><b>zavolat</b> funkci (obecně/příklady)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc9" id="kapperlzakladyppcr9" title="Poznámka: při volání uživatelské funkce se závorky interpretují jako seznam, proto v něm dochází ke zplošťování. Tomu lze zabránit pomocí tzv. prototypů, proto k němu u vestavěných a některých knihovních funkcí nedochází. To vám umožňuje např. funkci „push“ předat přímo pole, aniž by se zploštilo.">(9)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">identifikátor_funkce</i>(<i class="dopln">seznam,parametrů</i>)</div>
<div class="radekzaklinadla">funkce()</div>
<div class="radekzaklinadla">funkce(1, $b, undef, 3)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2083781389"><span><a href="#z2083781389">ː</a></span></span>zavolat funkci přijímající blok příkazů (obecně)<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc10" id="kapperlzakladyppcr10" title="Pozor! Předávaný blok příkazů se chová jako samostatná funkce (dostává parametry v poli @ARG a vrací hodnotu), až na příkaz „return“. Ten v tomto bloku NIKDY nepoužívejte! Návratovou hodnotou bloku bude hodnota posledního provedeného příkazu. Pokud blok obsahuje jen jeden krátký příkaz, můžete volání zapsat na jednu řádku.">(10)</a></sup></div><div class="radky">
<div class="radekzaklinadla">(<i class="dopln">identifikátor_funkce</i> {</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><i class="dopln">příkaz bloku;</i><span class="tritecky"></span></div>
<div class="radekzaklinadla">} <span class="volznak">[</span><i class="dopln">seznam,parametrů</i><span class="volznak">]</span><span class="tritecky"></span>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z192611545"><span><a href="#z192611545">◻</a></span></span>zavolat funkci přijímající blok příkazů (příklad)<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">my @hodnoty = (map {</div>
<div class="radekzaklinadla" style="padding-left:2ch;">$ARG + 1;</div>
<div class="radekzaklinadla">} @část1, -1, @část2);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1807052536"><span><a href="#z1807052536">⁂</a></span></span>předat řízení do funkce<span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc11" id="kapperlzakladyppcr11" title="Tento příkaz předá řízení přímo na začátek uvedené funkce, jako by byla volána místo funkce právě prováděné. Všechny lokální proměnné jsou před voláním zrušeny a pole @ARG bude předáno tak, jak právě je (včetně případných změn, které v něm stávající funkce provedla).">(11)</a></sup></div><div class="radky">
<div class="radekzaklinadla">goto &amp;<i class="dopln">identifikátor_funkce</i>;</div>
</div></div>

<h3 id="cast3x4"><span><a href="#cast3x4" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 4 (Definice funkcí)"><sup>3/</sup>4 Definice funkcí</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1704297165"><span><a href="#z1704297165">✮</a></span></span><b>definovat</b> funkci<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc12" id="kapperlzakladyppcr12" title="Funkce nemusí být definovaná před prvním použitím, ale pokud má prototyp, ten musí být před prvním použitím znám.">(12)</a></sup></div><div class="radky">
<div class="radekzaklinadla">sub <i class="dopln">identifikátor_funkce</i> <span class="volznak">[</span>(<i class="dopln">prototyp</i>)<span class="volznak">]</span></div>
<div class="radekzaklinadla">{</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span>typy(@ARG) =~ /\A<i class="dopln">regulární-výraz</i>\z/ or croak(<i class="dopln">&quot;chybové hlášení&quot;</i>);<span class="volznak">]</span></div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span><span class="tritecky"></span></div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1075476366"><span><a href="#z1075476366">⣫</a></span></span>definovat funkci vracející přiřaditelný objekt<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc13" id="kapperlzakladyppcr13" title="Funkce definovaná s modifikátorem „lvalue“ musí vrátit přiřaditelný skalár (proměnnou, prvek pole či hodnotu v asociativním poli). Nemůže vracet pole, undef apod.">(13)</a></sup></div><div class="radky">
<div class="radekzaklinadla">sub <i class="dopln">identifikátor_funkce</i> <span class="volznak">[</span>(<i class="dopln">prototyp</i>)<span class="volznak">]</span> : lvalue</div>
<div class="radekzaklinadla">{</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span>typy(@ARG) =~ /\A<i class="dopln">regulární-výraz</i>\z/ or croak(<i class="dopln">&quot;chybové hlášení&quot;</i>);<span class="volznak">]</span></div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span><span class="tritecky"></span></div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z90359800"><span><a href="#z90359800">ລ</a></span></span>pole <b>parametrů</b> uvnitř definice funkce<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc14" id="kapperlzakladyppcr14" title="Na rozdíl od normálních polí, prvky tohoto speciálního pole se do funkce předávají odkazem. To znamená, že přímým přiřazením do prvků tohoto pole můžete změnit proměnné (popř. prvky pole či hodnoty asociativního pole), které byly při volání funkce zadány. Pokud bylo daným parametrem funkce něco nepřiřaditelného, takové přiřazení se bude tiše ignorovat.">(14)</a></sup></div><div class="radky">
<div class="radekzaklinadla">@ARG</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1154790746"><span><a href="#z1154790746">ꙗ</a></span></span>deklarovat prototyp funkce před definicí<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">sub <i class="dopln">identifikátor_funkce</i> (<i class="dopln">prototyp</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z30528548"><span><a href="#z30528548">╣</a></span></span>definovat funkci přijímající blok příkazů<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc15" id="kapperlzakladyppcr15" title="Předaný blok zavoláte jako funkci příkazem „$id-&gt;(parametry)“, kde id je zvolený identifikátor proměnné. Parametry (volitelné) předané volání bloku jsou v definici předaného bloku přístupné v poli @ARG.">(15)</a></sup></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>sub <i class="dopln">identifikátor_funkce</i> (&amp;@);</div>
<div class="radekzaklinadla">sub <i class="dopln">identifikátor_funkce</i> (&amp;@)</div>
<div class="radekzaklinadla">{</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span>typy(@ARG) =~ /\AC<i class="dopln">regulární-výraz</i>\z/ or croak(<i class="dopln">&quot;chybové hlášení&quot;</i>);<span class="volznak">]</span></div>
<div class="radekzaklinadla" style="padding-left:2ch;">my $<i class="dopln">id</i> = shift(@ARG);</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span><span class="tritecky"></span></div>
<div class="radekzaklinadla">}</div>
</div></div>

<h3 id="cast3x5"><span><a href="#cast3x5" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 5 (Komentáře)"><sup>3/</sup>5 Komentáře</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z678164544"><span><a href="#z678164544">⠔</a></span></span><b>komentář</b> do konce řádku<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">normální obsah řádky</i><span class="volznak">]</span> # <i class="dopln">obsah komentáře</i></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z899257822"><span><a href="#z899257822">❀</a></span></span>víceřádkový komentář<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc16" id="kapperlzakladyppcr16" title="Pozor, před znakem „=“ na uvedených speciálních řádcích nesmí být žádný jiný znak, ani odsazení! Víceřádkové komentáře nelze zanořovat.">(16)</a></sup></div><div class="radky">
<div class="radekzaklinadla">=begin<span class="viditelnamezera">&nbsp;</span>comment</div>
<div class="radekzaklinadla"><i class="dopln">obsah komentáře (i víc řádků)</i></div>
<div class="radekzaklinadla">=end<span class="viditelnamezera">&nbsp;</span>comment</div>
<div class="radekzaklinadla">=cut</div>
</div></div>

<h3 id="cast3x6"><span><a href="#cast3x6" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 6 (Volání příkazů /bin/sh)"><sup>3/</sup>6 Volání příkazů /bin/sh</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z420770585"><span><a href="#z420770585">⋈</a></span></span>zavolat <b>příkaz</b> interpretu /bin/sh (obecně/příklad)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc17" id="kapperlzakladyppcr17" title="Část „&gt;&gt; 8“ je nutná v případě, kdy vás zajímá návratový kód procesu. Ten je totiž v návratové hodnotě funkce vynásoben hodnotou 256 (tedy bitově posunut o 8 bitů doleva). Poznámka: funkce „system()“ vám neumožňuje zapisovat na vstup procesu nebo číst z jeho výstupu. K těmto účelům použijte roury popsané v sekci „Zaklínadla: Vstup/výstup“.">(17)</a></sup></div><div class="radky">
<div class="radekzaklinadla">system(<i class="dopln">&quot;text příkazů&quot;</i>);</div>
<div class="radekzaklinadla">system(&quot;x=3; x=\$((x + 1)); echo \$x&quot;);</div>
<div class="radekzaklinadla akce">Návratový kód procesu získáte jako „($CHILD_ERROR &gt;&gt; 8)“.</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z14383756"><span><a href="#z14383756">⫺</a></span></span>+ zachytit jeho std. výstup <b>po řádkách</b> do pole<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span>my <i class="dopln">@výstup</i> =<span class="volznak">]</span> do {use open(&quot;IN&quot;, &quot;:utf8&quot;); local $RS = &quot;\n&quot;; my @x = array(readpipe(<i class="dopln">&quot;text příkazů&quot;</i>)); chomp(@x); @x;};</div>
<div class="radekzaklinadla akce">Návratový kód procesu získáte jako „($CHILD_ERROR &gt;&gt; 8)“.</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1877486831"><span><a href="#z1877486831">䷈</a></span></span>+ zachytit jeho std. výstup do <b>jednoho řetězce</b><span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span>my <i class="dopln">$výstup</i> =<span class="volznak">]</span> do {use open(&quot;IN&quot;, &quot;:utf8&quot;); local $RS = undef; scalar(readpipe(<i class="dopln">&quot;text příkazů&quot;</i>));};</div>
<div class="radekzaklinadla akce">Návratový kód procesu získáte jako „($CHILD_ERROR &gt;&gt; 8)“.</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1296392692"><span><a href="#z1296392692">⋠</a></span></span>+ zachytit jeho std. výstup <b>binárně</b> do řetězce bajtů<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span>my <i class="dopln">$výstup</i> =<span class="volznak">]</span> do {use open(&quot;IN&quot;, &quot;:raw&quot;); local $RS = undef; scalar(readpipe(<i class="dopln">&quot;text příkazů&quot;</i>));};</div>
<div class="radekzaklinadla akce">Návratový kód procesu získáte jako „($CHILD_ERROR &gt;&gt; 8)“.</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1914100756"><span><a href="#z1914100756">⚇</a></span></span>+ zachytit jeho std. výstup textově po záznamech ukončených „\0“ do pole<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span>my <i class="dopln">@výstup</i> =<span class="volznak">]</span> do {use open(&quot;IN&quot;, &quot;:utf8&quot;); local $RS = &quot;\x{0}&quot;; my @x = array(readpipe(<i class="dopln">&quot;text příkazů&quot;</i>)); chomp(@x); @x;};</div>
<div class="radekzaklinadla akce">Návratový kód procesu získáte jako „($CHILD_ERROR &gt;&gt; 8)“.</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z751029254"><span><a href="#z751029254">╹</a></span></span>+ zachytit jeho std. výstup do pole <b>obecně</b><span class="cislo">#6 </span><sup><a href="#kapperlzakladyppc18" id="kapperlzakladyppcr18" title="Ohledně nastavení oddělovače — viz poznámku pod čarou týkající se speciální proměnné $RS.">(18)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span>my <i class="dopln">@výstup</i> =<span class="volznak">]</span> do {use open(&quot;IN&quot;, <i class="dopln">&quot;:režim-čtení&quot;</i> ); local $RS = <i class="dopln">nastavení-oddělovače</i>; my @x = array(readpipe(<i class="dopln">&quot;text příkazů&quot;</i>)); chomp(@x); @x;};</div>
<div class="radekzaklinadla akce">Návratový kód procesu získáte jako „($CHILD_ERROR &gt;&gt; 8)“.</div>
</div></div>

<h3 id="cast3x7"><span><a href="#cast3x7" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 7 (Operace s čísly)"><sup>3/</sup>7 Operace s čísly</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z802330970"><span><a href="#z802330970">┭</a></span></span><b>dělení</b> (celočíselné/reálné/příklad celočíselného)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc19" id="kapperlzakladyppcr19" title="Funkce „div“ (z balíčku LinuxKnihaKouzel.pl) provede celočíselné dělení absolutních hodnot zadaných čísel a vrací dvojici (výsledek, zbytek); výsledek z ní získáte přečtením prvku s indexem 0.">(19)</a></sup></div><div class="radky">
<div class="radekzaklinadla">(div(<i class="dopln">dělenec</i>, <i class="dopln">dělitel</i>))[0]</div>
<div class="radekzaklinadla"><i class="dopln">dělenec</i> / <i class="dopln">dělitel</i></div>
<div class="radekzaklinadla">my ($podíl, $zbytek) = div(5, 2);<span class="prikladhodnoty">⊨ (2, 1)</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1843926214"><span><a href="#z1843926214">⢿</a></span></span>absolutní hodnota<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">abs(<i class="dopln">skalár</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z741676945"><span><a href="#z741676945">⧎</a></span></span><b>zaokrouhlit</b> na nejbližší celé číslo<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use POSIX;</div>
<div class="radekzaklinadla"><i class="dopln">x</i> &gt;= 0 ? POSIX::floor(0.5 + <i class="dopln">x</i>) : -POSIX::floor(0.5 - <i class="dopln">x</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1091879463"><span><a href="#z1091879463">⢐</a></span></span>zaokrouhlit k nule<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">int(<i class="dopln">skalár</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2137266469"><span><a href="#z2137266469">╕</a></span></span>vygenerovat <b>pseudonáhodné</b> celé číslo 0 ≤ y &lt; maximum<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">int(rand() * <i class="dopln">maximum</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z421989258"><span><a href="#z421989258">☉</a></span></span>vygenerovat pseudonáhodné celé číslo 0 ≤ y &lt; 4 294 967 296<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">int(rand() * 4294967296)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z111618739"><span><a href="#z111618739">⇟</a></span></span>nastavit počáteční „semínko“ generátoru pseudonáhodných čísel (na hodnotu/podle času)<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla">srand(<i class="dopln">x</i>);</div>
<div class="radekzaklinadla">srand(time());</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1797422105"><span><a href="#z1797422105">∥</a></span></span>druhá <b>odmocnina</b>/druhá mocnina<span class="cislo">#8 </span></div><div class="radky">
<div class="radekzaklinadla">sqrt(<i class="dopln">x</i>)</div>
<div class="radekzaklinadla"><i class="dopln">x</i> ** 2</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1941775650"><span><a href="#z1941775650">❥</a></span></span>arcus tangens y / x<span class="cislo">#9 </span></div><div class="radky">
<div class="radekzaklinadla">atan2(<i class="dopln">y</i>, <i class="dopln">x</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1025574123"><span><a href="#z1025574123">ꓽ</a></span></span>sinus/konsinus/tangens/cotangens<span class="cislo">#10 </span></div><div class="radky">
<div class="radekzaklinadla">sin(<i class="dopln">x</i>)</div>
<div class="radekzaklinadla">cos(<i class="dopln">x</i>)</div>
<div class="radekzaklinadla">sin(<i class="dopln">x</i>) / cos(<i class="dopln">x</i>)</div>
<div class="radekzaklinadla">cos(<i class="dopln">x</i>) / sin(<i class="dopln">x</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1330897177"><span><a href="#z1330897177">⢈</a></span></span>přirozený logaritmus/e na x-tou<span class="cislo">#11 </span></div><div class="radky">
<div class="radekzaklinadla">log(<i class="dopln">x</i>)</div>
<div class="radekzaklinadla">exp(<i class="dopln">x</i>)</div>
</div></div>

<h3 id="cast3x8"><span><a href="#cast3x8" title="kapitola 9 (Perl: základy), sekce 3 (Zaklínadla: Základní), podsekce 8 (Speciální proměnné)"><sup>3/</sup>8 Speciální proměnné</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1206390466"><span><a href="#z1206390466">⬏</a></span></span>řetězec vkládaný funkcí „<b>print</b>“ mezi argumenty/za poslední argument<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc20" id="kapperlzakladyppcr20" title="Výchozí hodnota obou proměnných je nehodnota undef, která zde má stejný význam jako prázdný řetězec.">(20)</a></sup></div><div class="radky">
<div class="radekzaklinadla">$OFS<span class="prikladhodnoty">⊨ undef</span></div>
<div class="radekzaklinadla">$ORS<span class="prikladhodnoty">⊨ undef</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z368856194"><span><a href="#z368856194">↷</a></span></span>vstupní <b>ukončovač</b> záznamu<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc21" id="kapperlzakladyppcr21" title="Jako ukončovač lze nastavit libovolný řetězec. Existují dva zvláštní případy: nastavení na prázdný řetězec způsobí, že jako ukončovač bude rozpoznána jakákoliv posloupnost dvou nebo více znaků \n; nehodnota undef způsobí, že vstup nebude dělený na záznamy a rovnou se načte celý zbytek vstupního souboru.">(21)</a></sup></div><div class="radky">
<div class="radekzaklinadla">$RS<span class="prikladhodnoty">⊨ &quot;\n&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1701258810"><span><a href="#z1701258810">䷣</a></span></span><b>verze</b> Perlu (jen čtení)<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">$PERL_VERSION<span class="prikladhodnoty">⊨ &quot;v5.30.0&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1125605994"><span><a href="#z1125605994">⩿</a></span></span>pole parametrů skriptu (obecně/příklad použití)<span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc22" id="kapperlzakladyppcr22" title="Na rozdíl od Bashe toto pole neobsahuje nultý parametr (název skriptu). Jsou to opravdu jen parametry předané skriptu na příkazové řádce.">(22)</a></sup></div><div class="radky">
<div class="radekzaklinadla">@ARGV</div>
<div class="radekzaklinadla">my $parametr1 = $ARGV[0];</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1354419585"><span><a href="#z1354419585">⣏</a></span></span>pole proměnných <b>prostředí</b> (obecně/příklad použití)<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc23" id="kapperlzakladyppcr23" title="Přiřazením je možno proměnné prostředí vytvářet a měnit.">(23)</a></sup></div><div class="radky">
<div class="radekzaklinadla">%ENV</div>
<div class="radekzaklinadla">$ENV{&quot;HOME&quot;}<span class="prikladhodnoty">⊨ &quot;/home/petr&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1501209324"><span><a href="#z1501209324">ƾ</a></span></span><b>PID</b>/PPID procesu (jen čtení)<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">$PID<span class="prikladhodnoty">⊨ 4485</span></div>
<div class="radekzaklinadla">getppid()<span class="prikladhodnoty">⊨ 3010</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1491484491"><span><a href="#z1491484491">☡</a></span></span>návratová hodnota procesu (jen čtení)<span class="cislo">#7 </span><sup><a href="#kapperlzakladyppc24" id="kapperlzakladyppcr24" title="Podle dokumentace se hodnota této proměnné nastavuje při uzavření roury funkcí „close()“, při úspěšném ukončení funkcí „wait()“ a „waitpid()“ a při ukončení funkcí „readpipe()“ a „system()“.">(24)</a></sup></div><div class="radky">
<div class="radekzaklinadla">$CHILD_ERROR &gt;&gt; 8</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2039473465"><span><a href="#z2039473465">≘</a></span></span>Označení souboru se zdrojovým kódem (jen čtení)<span class="cislo">#8 </span><sup><a href="#kapperlzakladyppc25" id="kapperlzakladyppcr25" title="Tato proměnná je určena především pro ladění; raději se příliš nespoléhejte na konkrétní tvar, který vám vrátí.">(25)</a></sup></div><div class="radky">
<div class="radekzaklinadla">__FILE__<span class="prikladhodnoty">⊨ &quot;soubor.pl&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1039427284"><span><a href="#z1039427284">╂</a></span></span>Číslo řádky ve zdrojovém kódu (jen čtení)<span class="cislo">#9 </span></div><div class="radky">
<div class="radekzaklinadla">__LINE__<span class="prikladhodnoty">⊨ 351</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z917522810"><span><a href="#z917522810">⎠</a></span></span>UID uživatele (jen čtení)<span class="cislo">#10 </span></div><div class="radky">
<div class="radekzaklinadla">$UID<span class="prikladhodnoty">⊨ 1000</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z273583153"><span><a href="#z273583153">┕</a></span></span>časová známka okamžiku spuštění skriptu (jen čtení)<span class="cislo">#11 </span></div><div class="radky">
<div class="radekzaklinadla">$BASETIME<span class="prikladhodnoty">⊨ 1605871925</span></div>
</div></div>

<h2 id="cast4" class="zaklinadla"><a href="#cast4"><span class="cislo">4.</span> Zaklínadla: Řízení toku</a></h2>

<h3 id="cast4x1"><span><a href="#cast4x1" title="kapitola 9 (Perl: základy), sekce 4 (Zaklínadla: Řízení toku), podsekce 1 (Podmínky)"><sup>4/</sup>1 Podmínky</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z935057491"><span><a href="#z935057491">☫</a></span></span>provést blok příkazů, je-li <b>podmínka</b> pravdivá/nepravdivá<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">if (<i class="dopln">podmínka</i>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> } <span class="volznak">[</span>elsif (<i class="dopln">další podmínka</i>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> }<span class="volznak">]</span><span class="tritecky"></span> <span class="volznak">[</span>else { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> }<span class="volznak">]</span></div>
<div class="radekzaklinadla">unless (<i class="dopln">podmínka</i>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> } <span class="volznak">[</span>elsif (<i class="dopln">další podmínka</i>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> }<span class="volznak">]</span><span class="tritecky"></span> <span class="volznak">[</span>else { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> }<span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z440240391"><span><a href="#z440240391">⌘</a></span></span>provést <b>příkaz</b>, je-li podmínka pravdivá (alterantivy)<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">podmínka</i> and <i class="dopln">příkaz</i>;</div>
<div class="radekzaklinadla"><i class="dopln">příkaz</i> if (<i class="dopln">podmínka</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z202326977"><span><a href="#z202326977">⚦</a></span></span>provést příkaz, je-li podmínka nepravdivá (alterantivy)<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">podmínka</i> or <i class="dopln">příkaz</i>;</div>
<div class="radekzaklinadla"><i class="dopln">příkaz</i> unless (<i class="dopln">podmínka</i>);</div>
</div></div>

<h3 id="cast4x2"><span><a href="#cast4x2" title="kapitola 9 (Perl: základy), sekce 4 (Zaklínadla: Řízení toku), podsekce 2 (Cykly)"><sup>4/</sup>2 Cykly</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z193087025"><span><a href="#z193087025">✪</a></span></span>cyklus <b>for</b> (s definicí vlastní proměnné/obecný)<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">návěští</i>:<span class="volznak">]</span> for (my $<i class="dopln">identifikátor</i> = <i class="dopln">výraz</i>; <span class="volznak">[</span><i class="dopln">podmínka</i><span class="volznak">]</span>; <span class="volznak">[</span><i class="dopln">výraz-iterace</i><span class="volznak">]</span>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> }</div>
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">návěští</i>:<span class="volznak">]</span> for (<span class="volznak">[</span><i class="dopln">výraz-inicializace</i><span class="volznak">]</span>; <span class="volznak">[</span><i class="dopln">podmínka</i><span class="volznak">]</span>; <span class="volznak">[</span><i class="dopln">výraz-iterace</i><span class="volznak">]</span>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> }</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1652271721"><span><a href="#z1652271721">♙</a></span></span>cyklus <b>foreach</b> (obecně/příklady)<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">návěští</i>:<span class="volznak">]</span> foreach <span class="volznak">[</span>my<span class="volznak">]</span> $<i class="dopln">identifikátor</i> (<i class="dopln">seznam</i>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> } <span class="volznak">[</span>continue { <span class="volznak">[</span><i class="dopln">další příkazy</i><span class="volznak">]</span> }<span class="volznak">]</span></div>
<div class="radekzaklinadla">foreach my $x (1, 2, 3) { printf(&quot;Číslo %d.\n&quot;, $x); }</div>
<div class="radekzaklinadla">foreach my $x (@ARG) { printf(&quot;%s\n&quot;, $x); }</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z848414290"><span><a href="#z848414290">⪐</a></span></span>cyklus typu <b>while</b> (s pozitivní podmínkou/negovanou podmínkou)<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">návěští</i>:<span class="volznak">]</span> while (<i class="dopln">podmínka</i>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> } <span class="volznak">[</span>continue { <span class="volznak">[</span><i class="dopln">další příkazy</i><span class="volznak">]</span> }<span class="volznak">]</span></div>
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">návěští</i>:<span class="volznak">]</span> until (<i class="dopln">podmínka</i>) { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> } <span class="volznak">[</span>continue { <span class="volznak">[</span><i class="dopln">další příkazy</i><span class="volznak">]</span> }<span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1902952462"><span><a href="#z1902952462">❍</a></span></span>cyklus s podmínkou uprostřed<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">návěští</i>:<span class="volznak">]</span> {</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span></div>
<div class="radekzaklinadla" style="padding-left:2ch;">last <span class="volznak">[</span><i class="dopln">návěští</i><span class="volznak">]</span> unless (<i class="dopln">podmínka pokračování</i>);</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span></div>
<div class="radekzaklinadla" style="padding-left:2ch;">redo;</div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1640066957"><span><a href="#z1640066957">⊀</a></span></span>cyklus typu <b>do...while</b> (s pozitivní podmínkou/negovanou podmínkou)<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">do { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> } while (<i class="dopln">podmínka</i>);</div>
<div class="radekzaklinadla">do { <span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span> } while (!(<i class="dopln">podmínka</i>));</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2096917250"><span><a href="#z2096917250">⚃</a></span></span><b>nekonečný</b> cyklus<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">návěští</i>:<span class="volznak">]</span> {</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span></div>
<div class="radekzaklinadla" style="padding-left:2ch;">redo;</div>
<div class="radekzaklinadla">}</div>
</div></div>

<h3 id="cast4x3"><span><a href="#cast4x3" title="kapitola 9 (Perl: základy), sekce 4 (Zaklínadla: Řízení toku), podsekce 3 (Skoky)"><sup>4/</sup>3 Skoky</a></span></h3>
<p class="ponadpisu">
Poznámka k příkazům „last“, „next“ a „redo“: neoznačený blok příkazů „{}“
se v Perlu považuje za cyklus a tyto příkazy se na něj vztahují!
</p>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1307721198"><span><a href="#z1307721198">⪒</a></span></span>vyskočit z funkce a <b>vrátit</b> návratovou hodnotu<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc26" id="kapperlzakladyppcr26" title="Příkaz „return“ v Perlu není povinný. Při jeho nepoužití vrátí Perl hodnotu posledního provedeného příkazu ve funkci.">(26)</a></sup></div><div class="radky">
<div class="radekzaklinadla">return <i class="dopln">návratová hodnota</i>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z13792340"><span><a href="#z13792340">₪</a></span></span>vyskočit za <b>konec cyklu</b><span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">last <span class="volznak">[</span><i class="dopln">návěští</i><span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1874635594"><span><a href="#z1874635594">⢂</a></span></span><b>ukončit</b> program<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">exit(<span class="volznak">[</span><i class="dopln">návratový-kód</i><span class="volznak">]</span>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z130314656"><span><a href="#z130314656">❙</a></span></span>ukončit program s hlášením kritické chyby v tomto místě/ve volající funkci<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">die(&quot;<i class="dopln">text</i>&quot;);</div>
<div class="radekzaklinadla">croak(&quot;<i class="dopln">text</i>&quot;);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z331812368"><span><a href="#z331812368">⠃</a></span></span>skočit těsně před uzavírací závorku cyklu<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">next <span class="volznak">[</span><i class="dopln">návěští</i><span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z205981117"><span><a href="#z205981117">䷧</a></span></span><b>pozdržet</b> program o daný počet sekund<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">my $<i class="dopln">pomocnáProměnná</i> = <i class="dopln">N</i>;</div>
<div class="radekzaklinadla">while (($<i class="dopln">pomocnáProměnná</i> -= sleep($<i class="dopln">pomocnáProměnná</i>)) &gt; 0) {}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z544952678"><span><a href="#z544952678">╁</a></span></span>skočit přímo za otevírací závorku cyklu<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla">redo <span class="volznak">[</span><i class="dopln">návěští</i><span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z625152611"><span><a href="#z625152611">⨏</a></span></span>skočit na návěští (<b>goto</b>)(pevně dané/dynamicky určené)<span class="cislo">#8 </span></div><div class="radky">
<div class="radekzaklinadla">goto <i class="dopln">návěští</i>;</div>
<div class="radekzaklinadla">goto <i class="dopln">skalární_výraz</i>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z113559589"><span><a href="#z113559589">♦</a></span></span>návěští pro příkaz goto<span class="cislo">#9 </span><sup><a href="#kapperlzakladyppc27" id="kapperlzakladyppcr27" title="Poznámka: jeden příkaz může být označen více návěštími.">(27)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">identifikátor</i>: <i class="dopln">návěštím označený příkaz</i></div>
</div></div>

<h3 id="cast4x4"><span><a href="#cast4x4" title="kapitola 9 (Perl: základy), sekce 4 (Zaklínadla: Řízení toku), podsekce 4 (Přepínač typu switch)"><sup>4/</sup>4 Přepínač typu switch</a></span></h3>
<p class="ponadpisu">
Poznámka: Perl nenabízí žádnou konstrukci, která by fungovala jako plnohodnotný přepínač
s propadáním přes větve, použitím jedné větve pro více hodnot a větví „default“
a vynucovala konstantnost a jedinečnost hodnot pro jednotlivé větve.
Nabízí sice několik možností, jak dosáhnout
stejného chování, ale všechny kromě asociativního pole ukazatelů na funkce
se vnitřně chovají jako sekvence if-else-if. Většina použití příkazu „switch“
však může být rozumně nahrazena inteligentním použitím asociativních polí.
</p>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z449617218"><span><a href="#z449617218">↡</a></span></span>přepínač bez propadání (řetězcové porovnání)<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">my %switch;</div>
<div class="radekzaklinadla"><span class="volznak">[</span>$switch{<i class="dopln">hodnota</i>} = sub {<i class="dopln">kód</i>};<span class="volznak">]</span><span class="tritecky"></span></div>
<div class="radekzaklinadla"><span class="volznak">[</span>$switch{<i class="dopln">hodnota</i>} = $switch{<i class="dopln">dříve-definovaná-hodnota</i>};<span class="volznak">]</span><span class="tritecky"></span></div>
<div class="radekzaklinadla">my $default = sub {<i class="dopln">blok-default</i>};</div>
<div class="radekzaklinadla">{</div>
<div class="radekzaklinadla" style="padding-left:2ch;">my $switch = <i class="dopln">testovaný výraz</i>;</div>
<div class="radekzaklinadla" style="padding-left:2ch;">($switch{$switch} // $default)-&gt;($switch);</div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1891573403"><span><a href="#z1891573403">▄</a></span></span>příklad použití<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">my $stdin = \*STDIN;</div>
<div class="radekzaklinadla">my $s = scalar(readline($stdin));</div>
<div class="radekzaklinadla">chomp($s);</div>
<div class="radekzaklinadla">my %switch;</div>
<div class="radekzaklinadla">$switch{&quot;abc&quot;} = sub {printf(&quot;Bylo ABC.\n&quot;)};</div>
<div class="radekzaklinadla">$switch{&quot;xyz&quot;} = sub {printf(&quot;Bylo XYZ.\n&quot;)};</div>
<div class="radekzaklinadla">$switch{&quot;ABC&quot;} = $switch{&quot;abc&quot;};</div>
<div class="radekzaklinadla">$switch{&quot;XYZ&quot;} = $switch{&quot;xyz&quot;};</div>
<div class="radekzaklinadla">my $default = sub {printf(&quot;Nebylo nic z toho.\n&quot;)};</div>
<div class="radekzaklinadla">{</div>
<div class="radekzaklinadla" style="padding-left:2ch;">my $switch = $s;</div>
<div class="radekzaklinadla" style="padding-left:2ch;">($switch{$switch} // $default)-&gt;($switch);</div>
<div class="radekzaklinadla">}</div>
</div></div>

<h2 id="cast5" class="zaklinadla"><a href="#cast5"><span class="cislo">5.</span> Zaklínadla: Řetězce a regulární výrazy</a></h2>

<h3 id="cast5x1"><span><a href="#cast5x1" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 1 (Základní operace)"><sup>5/</sup>1 Základní operace</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1178240836"><span><a href="#z1178240836">ͱ</a></span></span><b>spojit</b> řetězce/pole na řetězec<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$řetězec</i> . <i class="dopln">$další_řetězec</i> <span class="volznak">[</span>. <i class="dopln">$ještě_další_řetězec</i><span class="volznak">]</span></div>
<div class="radekzaklinadla">join(&quot;<span class="volznak">[</span><i class="dopln">oddělovač</i><span class="volznak">]</span>&quot;, <i class="dopln">pole-a-seznamy</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z107768311"><span><a href="#z107768311">⎩</a></span></span>zjistit <b>délku</b> řetězce ve znacích<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">length(<i class="dopln">$skalár</i>)<span class="prikladhodnoty">⊨ 12</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z18943539"><span><a href="#z18943539">❮</a></span></span>jsou/nejsou si řetězce <b>rovny</b>?<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">řetězec1</i> eq <i class="dopln">řetězec2</i></div>
<div class="radekzaklinadla"><i class="dopln">řetězec1</i> ne <i class="dopln">řetězec2</i></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1115898373"><span><a href="#z1115898373">╀</a></span></span>formátovat parametry na řetězec funkcí <b>sprintf</b>()<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">sprintf(<i class="dopln">formát</i>, <i class="dopln">seznam, parametrů</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1044490824"><span><a href="#z1044490824">Ꙭ</a></span></span>jsou si řetězce rovny až na velikost písmen?<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">fc(<i class="dopln">řetězec1</i>) eq fc(<i class="dopln">řetězec2</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1276716474"><span><a href="#z1276716474">⠦</a></span></span><b>kódové</b> číslo Unicode prvního/N-tého znaku řetězce<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">ord(<i class="dopln">řetězec</i>)<span class="prikladhodnoty">⊨ 382</span></div>
<div class="radekzaklinadla">ord(substr(<i class="dopln">řetězec</i>, <i class="dopln">N-1</i>, 1))</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z197182487"><span><a href="#z197182487">‡</a></span></span><b>zopakovat</b> řetězec (obecně/příklad)<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">řetězec</i> x <i class="dopln">počet</i></div>
<div class="radekzaklinadla">&quot;abc&quot; x 3<span class="prikladhodnoty">⊨ &quot;abcabcabc&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1585642190"><span><a href="#z1585642190">꜔</a></span></span>řetězec na malá/velká písmena<span class="cislo">#8 </span></div><div class="radky">
<div class="radekzaklinadla">lc(<i class="dopln">řetězec</i>)<span class="prikladhodnoty">⊨ &quot;žluťoučký kůň&quot;</span></div>
<div class="radekzaklinadla">uc(<i class="dopln">řetězec</i>)<span class="prikladhodnoty">⊨ &quot;ŽLUŤOUČKÝ KŮŇ&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z320709798"><span><a href="#z320709798">↲</a></span></span>obrátit pořadí znaků v řetězci<span class="cislo">#9 </span></div><div class="radky">
<div class="radekzaklinadla">scalar(reverse(<i class="dopln">řetězec</i>))<span class="prikladhodnoty">⊨ adeceba</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z504605690"><span><a href="#z504605690">▒</a></span></span>zjistit počet bajtů po zakódování do UTF-8<span class="cislo">#10 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Encode;</div>
<div class="radekzaklinadla">length(Encode::encode(&quot;UTF-8&quot;, <i class="dopln">řetězec</i>))</div>
</div></div>

<h3 id="cast5x2"><span><a href="#cast5x2" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 2 (Dělení na podřetězce)"><sup>5/</sup>2 Dělení na podřetězce</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z753224329"><span><a href="#z753224329">⨙</a></span></span>získat <b>podřetězec</b> (obecně/max. délka zleva/max. délka zprava)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc28" id="kapperlzakladyppcr28" title="Počáteční index může být i záporný; v takovém případě se k němu před použitím přičte délka řetězce. Výsledný interval daný počátečním indexem a maximální délkou se musí s pozicemi existujícími v řetězci alespoň dotýkat, pokud bude zcela mimo řetězec, funkce vypíše varování a vrátí undef. Maximální délka se vždy počítá od zadané pozice, ne od skutečného začátku řetězce, proto např. „substr(&quot;AB&quot;, -3, 2)“ vrátí pouze &quot;A&quot;.">(28)</a></sup></div><div class="radky">
<div class="radekzaklinadla">substr(<i class="dopln">řetězec</i>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">maximální-délka</i><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">substr(<i class="dopln">řetězec</i>, 0, <i class="dopln">maximální-délka</i>)</div>
<div class="radekzaklinadla"><i class="dopln">maximální-délka</i> &gt; 0 ? substr(<i class="dopln">řetězec</i>, -<i class="dopln">maximální-délka</i>) : &quot;&quot;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z587044090"><span><a href="#z587044090">♍</a></span></span>odebrat z proměnné ukončovač záznamu<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc29" id="kapperlzakladyppcr29" title="Odebere z konce řetězce v proměnné ukončovač podle nastavení speciální proměnné $RS. Velmi často se používá po načtení řádky. Pokud řetězec ukončovačem nekončí, proměnná zůstane nezměněná.">(29)</a></sup></div><div class="radky">
<div class="radekzaklinadla">chomp(<i class="dopln">$proměnná</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z660977238"><span><a href="#z660977238">⎔</a></span></span><b>rozdělit</b> řetězec na pole (obecně/příklady)<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc30" id="kapperlzakladyppcr30" title="Oddělovač může být buď skalár (např. řetězec), nebo literál regulárního výrazu v lomítkách. Pozor na pasti! Past č. 1: Řetězec &quot;&blank;&quot; se zde interpretuje jako regulární výraz „\s+“. Pokud chcete jako oddělovač uvést mezeru, použijte místo řetězce regulární výraz „&blank;“ zadaný jako „/&blank;/“. Past č. 2: pokud regulární výraz obsahuje záchyty, příkaz „split“ pro každý záchyt vloží na dané místo výstupního pole navíc řetězec s textem záchytu; pokud daný záchyt nebyl použit, vloží se tam undef. Podrobnější vysvětlení v dokumentaci funkce „split“.">(30)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> split(<i class="dopln">oddělovač</i>, <i class="dopln">dělený-řetězec</i><span class="volznak">[</span>, <i class="dopln">maximální-počet-dílů</i><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">@pole = split(&quot;:&quot;, $s);</div>
<div class="radekzaklinadla">@pole = split(/[:;]/, $s);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1037162363"><span><a href="#z1037162363">⣋</a></span></span>vyjmout z řetězce v proměnné <b>poslední znak</b> (obecně/příklad)<span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc31" id="kapperlzakladyppcr31" title="Pro prázdný řetězec vrací funkce chop() prázdný řetězec a proměnnou nezmění. Podle dokumentace funkce „chop()“ nevyžaduje okopírování celého řetězce, takže může být použita v cyklu pro zpracování řetězce znak po znaku.">(31)</a></sup></div><div class="radky">
<div class="radekzaklinadla">chop(<i class="dopln">$proměnná</i>)</div>
<div class="radekzaklinadla">my $x = &quot;abe&quot;; printf(&quot;1: %s &quot;, chop($x)); printf(&quot;2: %s\n&quot;, chop($x));<span class="prikladhodnoty">⊨ 1: e 2: b</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1850809027"><span><a href="#z1850809027">✏</a></span></span>rozdělit řetězec na <b>poloviny</b><span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">(substr(<i class="dopln">$skalár</i>, 0, length(<i class="dopln">$skalár</i>) / 2), substr(<i class="dopln">$skalár</i>, length(<i class="dopln">$skalár</i>) / 2))</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z472950648"><span><a href="#z472950648">⠐</a></span></span>rozdělit řetězec na pole <b>jednotlivých</b> znaků<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> split(&quot;&quot;, <i class="dopln">řetězec</i>)</div>
</div></div>

<h3 id="cast5x3"><span><a href="#cast5x3" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 3 (Literály řetězců)"><sup>5/</sup>3 Literály řetězců</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z633184163"><span><a href="#z633184163">ᚌ</a></span></span>řetězcový <b>literál</b> (alternativy)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc32" id="kapperlzakladyppcr32" title="Ve dvojitých uvozovkách jsou zvláštními znaky „\“, „$“, „@“ a „&quot;“, všechny lze odzvláštnit zpětným lomítkem. Navíc se tam intepretují některé sekvence začínající zpětným lomítkem a písmenem (např. „\n“). V apostrofech je zvláštním znakem pouze apostrof a odzvláštnění není možné. Konec řádky může být obsažen v obou druzích literálů bez odzvláštnění.">(32)</a></sup></div><div class="radky">
<div class="radekzaklinadla">&quot;<i class="dopln">text</i>&quot;</div>
<div class="radekzaklinadla">'<i class="dopln">text</i>'</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1544164926"><span><a href="#z1544164926">⡛</a></span></span>řetězec: dvojitá uvozovka, tabulátor a \n<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">&quot;<i class="dopln">...</i>\&quot;\t\n<i class="dopln">...</i>&quot;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2051887206"><span><a href="#z2051887206">❘</a></span></span>nulový bajt<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc33" id="kapperlzakladyppcr33" title="Můžete sice použít i „\0“, ale ne, pokud by za ním měla následovat číslice. „\01“ totiž vygeneruje bajt s hodnotou 1, ne nulový bajt a číslici 1.">(33)</a></sup></div><div class="radky">
<div class="radekzaklinadla">&quot;<i class="dopln">...</i>\x{0}<i class="dopln">...</i>&quot;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z288916373"><span><a href="#z288916373">▼</a></span></span>znak Unicode podle kódového čísla (obecně/příklady)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">&quot;<i class="dopln">...</i>\x{<i class="dopln">hexčíslo</i>}<i class="dopln">...</i>&quot;</div>
<div class="radekzaklinadla">&quot;\x{017e}&quot;<span class="prikladhodnoty">⊨ &quot;ž&quot;</span></div>
<div class="radekzaklinadla">&quot;\x{1f642}&quot;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1844998986"><span><a href="#z1844998986">⇬</a></span></span>prázdný řetězec<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">&quot;&quot;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z966773391"><span><a href="#z966773391">ʘ</a></span></span>získat ukazatel na skalární objekt (obecně/příklad)<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">\(<i class="dopln">řetězec</i>)</div>
<div class="radekzaklinadla">my $ukazatel = \(&quot;Hello, world.\n&quot;);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1139485415"><span><a href="#z1139485415">⛁</a></span></span>interpolovat skalární proměnnou<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla">&quot;<i class="dopln">...</i>${<i class="dopln">identifikátor</i>}<i class="dopln">...</i>&quot;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z399608529"><span><a href="#z399608529">⊟</a></span></span>interpolovat prvky pole<span class="cislo">#8 </span><sup><a href="#kapperlzakladyppc34" id="kapperlzakladyppcr34" title="Pozor, výchozí oddělovač je mezera. Chcete-li interpolovat prvky pole bez oddělení, musíte do proměnné $LIST_SEPARATOR nastavit prázdný řetězec.">(34)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><span class="volznak">[</span>local<span class="volznak">]</span> $LIST_SEPARATOR = &quot;<i class="dopln">oddělovač</i>&quot;;<span class="volznak">]</span></div>
<div class="radekzaklinadla">&quot;<i class="dopln">...</i>@{<i class="dopln">identifikátor</i>}<i class="dopln">...</i>&quot;</div>
</div></div>

<h3 id="cast5x4"><span><a href="#cast5x4" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 4 (Literály regulárních výrazů)"><sup>5/</sup>4 Literály regulárních výrazů</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1114934530"><span><a href="#z1114934530">ຫ</a></span></span>získat ukazatel na regulární výraz<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span><i class="dopln">příznaky</i><span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z632237541"><span><a href="#z632237541">ᚅ</a></span></span>regulární výraz přímo (jen v určitých kontextech)<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">/<i class="dopln">regulární výraz</i>/</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1253580504"><span><a href="#z1253580504">⡁</a></span></span>interpolovat do regulárního výrazu: dynamický regulární výraz/doslovný řetězec/reg. výraz z ukazatele<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">qr/<i class="dopln">...</i>${<i class="dopln">identifikátor_skalární_proměnné</i>}<i class="dopln">...</i>/</div>
<div class="radekzaklinadla">qr/<i class="dopln">...</i>\Q${<i class="dopln">identifikátor_skalární_proměnné</i>}\E<i class="dopln">...</i>/</div>
<div class="radekzaklinadla">qr/<i class="dopln">...</i>${<i class="dopln">identifikátor_skalární_proměnné</i>}<i class="dopln">...</i>/</div>
</div></div>

<h3 id="cast5x5"><span><a href="#cast5x5" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 5 (Najít (regulární výrazy a podřetězce))"><sup>5/</sup>5 Najít (regulární výrazy a podřetězce)</a></span></h3>
<p class="ponadpisu">
Poznámka: funkce next_match_*() hledají shodu s regulárním výrazem v podřetězci vymezeném parametry „počáteční-index“ a „délka-hledání“ (jsou-li zadány); všechny indexy vracené těmito funkcemi jsou ale platné v původním prohledávaném řetězci. Pokud další shodu nenajdou, vrátí místo každého indexu či délky nehodnotu undef.
</p>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1044120823"><span><a href="#z1044120823">╕</a></span></span><b>má/nemá</b> shodu s regulárním výrazem?<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">řetězec</i> =~ <i class="dopln">/regulární výraz/</i><span class="volznak">[</span>i<span class="volznak">]</span><span class="volznak">[</span>m<span class="volznak">]</span></div>
<div class="radekzaklinadla"><i class="dopln">řetězec</i> !~ <i class="dopln">/regulární výraz/</i><span class="volznak">[</span>i<span class="volznak">]</span><span class="volznak">[</span>m<span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1899305746"><span><a href="#z1899305746">⋎</a></span></span>index začátku prvního/posledního výskytu <b>podřetězce</b><span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc35" id="kapperlzakladyppcr35" title="Nebyl-li podřetězec nalezen, funkce vrací -1. Limit u funkce „rindex()“ znamená, že budou ignorovány výskyty podřetězce, které začínají na vyšším indexu, než je uvedený limit.">(35)</a></sup></div><div class="radky">
<div class="radekzaklinadla">index(<i class="dopln">řetězec</i>, <i class="dopln">podřetězec</i> <span class="volznak">[</span>,<i class="dopln">index-začátku-vyhledávání</i><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">rindex(<i class="dopln">řetězec</i>, <i class="dopln">podřetězec</i> <span class="volznak">[</span>,<i class="dopln">limit</i><span class="volznak">]</span>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z516508935"><span><a href="#z516508935">⚊</a></span></span>najít následující shodu s regulárním výrazem (ze shody vrátit: začátek a délku/index začátku/index za koncem/text/délku)<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc36" id="kapperlzakladyppcr36" title="Pokud další shoda nebyla nalezena, funkce vrací undef, resp. next_match() vrací (undef, undef).">(36)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span>(<i class="dopln">$začátek</i>, <i class="dopln">$délka</i>) =<span class="volznak">]</span> next_match(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">next_match_begin(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">next_match_end(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">next_match_text(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">next_match_length(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z311764099"><span><a href="#z311764099">⇌</a></span></span>získat číslované <b>záchyty</b> následující shody s regulárním výrazem<span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc37" id="kapperlzakladyppcr37" title="Nebyla-li další shoda nalezena, vráceno bude prázdné pole. V ostatních případech je záchytem [0] shoda jako celek a počínaje indexem [1] jednotlivé záchyty ze závorek. Všechny záchyty se vracejí ve formě ukazatele na dvouprvkové pole (index začátku, délka záchytu).">(37)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> next_match_captures(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z82458470"><span><a href="#z82458470">⋋</a></span></span><b>počet</b> shod<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">alength(matches(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>))<span class="prikladhodnoty">⊨ 0</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z721152452"><span><a href="#z721152452">⇭</a></span></span>najít <b>pole</b> všech shod s regulárním výrazem<span class="cislo">#6 </span><sup><a href="#kapperlzakladyppc38" id="kapperlzakladyppcr38" title="Shody se vracejí ve formě ukazatele na dvouprvkové pole (index začátku, délka shody).">(38)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> matches(<i class="dopln">řetězec</i>, qr/<i class="dopln">regulární výraz</i>/<span class="volznak">[</span>, <i class="dopln">počáteční-index</i><span class="volznak">[</span>, <i class="dopln">délka-hledání</i><span class="volznak">]</span><span class="volznak">]</span>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z478653131"><span><a href="#z478653131">Ϯ</a></span></span><b>příklad</b>: vypsat všechny shody v řetězci<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla">my $řetězec = &quot;abcxyzabcxyz-axc&quot;;</div>
<div class="radekzaklinadla">my $i = 0;</div>
<div class="radekzaklinadla">my @x;</div>
<div class="radekzaklinadla">while (defined((@x = next_match($řetězec, qr/a.c/, $i))[0])) {</div>
<div class="radekzaklinadla" style="padding-left:2ch;">printf(&quot;(%d, %d) = \&quot;%s\&quot;\n&quot;, @x, substr($řetězec, $x[0], $x[1]));</div>
<div class="radekzaklinadla" style="padding-left:2ch;">$i = $x[0] + max(1, $x[1]);</div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1085771318"><span><a href="#z1085771318">⬤</a></span></span><b>odzvláštnit</b> řetězec pro použití v dynamickém regulárním výrazu<span class="cislo">#8 </span><sup><a href="#kapperlzakladyppc39" id="kapperlzakladyppcr39" title="Poznámka: tuto funkci obvykle nepotřebujete, protože do regulárního výrazu můžete interpolovat řetězec bez interpretace pomocí dvojice „\Q“ a „\E“.">(39)</a></sup></div><div class="radky">
<div class="radekzaklinadla">quotemeta(<i class="dopln">řetězec</i>)</div>
</div></div>

<h3 id="cast5x6"><span><a href="#cast5x6" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 6 (Najít a nahradit v řetězcové proměnné)"><sup>5/</sup>6 Najít a nahradit v řetězcové proměnné</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z719782298"><span><a href="#z719782298">➬</a></span></span>provést <b>náhradu</b> pomocí regulárního výrazu (výsledek: přiřadit zpět/vrátit jako hodnotu)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc40" id="kapperlzakladyppcr40" title="Podrobnější informace o syntaxi najdete v sekci „Regulární výraz a řetězec náhrady“.">(40)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$proměnná</i> =~ s/<i class="dopln">regulární výraz</i>/<i class="dopln">řetězec náhrady</i>/<span class="volznak">[</span>g<span class="volznak">]</span><span class="volznak">[</span>i<span class="volznak">]</span><span class="volznak">[</span>m<span class="volznak">]</span><span class="volznak">[</span>s<span class="volznak">]</span>;</div>
<div class="radekzaklinadla"><i class="dopln">$řetězec</i> =~ s/<i class="dopln">regulární výraz</i>/<i class="dopln">řetězec náhrady</i>/r<span class="volznak">[</span>g<span class="volznak">]</span><span class="volznak">[</span>i<span class="volznak">]</span><span class="volznak">[</span>m<span class="volznak">]</span><span class="volznak">[</span>s<span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z281097486"><span><a href="#z281097486">⡒</a></span></span>nahradit <b>všechny</b> výskyty podřetězce v textu proměnné<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc41" id="kapperlzakladyppcr41" title="Pro nahrazení jen prvního výskytu vypusťte „g“ na konci druhého řádku zaklínadla.">(41)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">$proměnná_podřetězec</i> = <i class="dopln">podřetězec</i>;<span class="volznak">]</span></div>
<div class="radekzaklinadla"><i class="dopln">$proměnná</i> =~ s/\Q${<i class="dopln">proměnná_podřetězec</i>}\E/<i class="dopln">řetězec náhrady</i>/g;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z441901812"><span><a href="#z441901812">⢗</a></span></span>přeložit znaky pomocí překladové tabulky<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc42" id="kapperlzakladyppcr42" title="Poznámka: výsledek překladu přepíše původní proměnnou, ale není návratovou hodnotou výrazu!">(42)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$proměnná</i> =~ y/<i class="dopln">původní-znaky</i>/<i class="dopln">nové-znaky</i>/;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1255208134"><span><a href="#z1255208134">䷑</a></span></span>nahradit podřetězec podle indexů (původní podřetězec zahodit/získat jako návr. hodnotu)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">substr(<i class="dopln">$proměnná</i>, <i class="dopln">index</i><span class="volznak">[</span>, <i class="dopln">max-délka</i><span class="volznak">]</span>) = <i class="dopln">nový-podřetězec</i>;</div>
<div class="radekzaklinadla">substr(<i class="dopln">$proměnná</i>, <i class="dopln">index</i>, <i class="dopln">max-délka</i>, <i class="dopln">nový-podřetězec</i>)</div>
</div></div>

<h3 id="cast5x7"><span><a href="#cast5x7" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 7 (Konverze čísel na řetězce a naopak)"><sup>5/</sup>7 Konverze čísel na řetězce a naopak</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2116073714"><span><a href="#z2116073714">⣡</a></span></span>hexadecimální/desítkový/oktalový řetězec na číslo<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">hex(<i class="dopln">řetězec</i>)<span class="prikladhodnoty">⊨ 1015</span></div>
<div class="radekzaklinadla"><i class="dopln">řetězec</i> + 0<span class="prikladhodnoty">⊨ 1015</span></div>
<div class="radekzaklinadla">oct(<i class="dopln">řetězec</i>)<span class="prikladhodnoty">⊨ 1015</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2016681285"><span><a href="#z2016681285">⇂</a></span></span>celé číslo na hexadecimální řetězec s malými/velkými písmeny<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">sprintf(&quot;%x&quot;, <i class="dopln">číslo</i>)<span class="prikladhodnoty">⊨ &quot;3f7&quot;</span></div>
<div class="radekzaklinadla">sprintf(&quot;%X&quot;, <i class="dopln">číslo</i>)<span class="prikladhodnoty">⊨ &quot;3F7&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z312839158"><span><a href="#z312839158">❐</a></span></span>celé číslo na oktalový řetězec<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">sprintf(&quot;%o&quot;, <i class="dopln">číslo</i>)<span class="prikladhodnoty">⊨ &quot;1767&quot;</span></div>
</div></div>

<h3 id="cast5x8"><span><a href="#cast5x8" title="kapitola 9 (Perl: základy), sekce 5 (Zaklínadla: Řetězce a regulární výrazy), podsekce 8 (Heše)"><sup>5/</sup>8 Heše</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1388720153"><span><a href="#z1388720153">⪠</a></span></span>získat číselnou heš řetězce<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Digest::MD5;</div>
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Encode;</div>
<div class="radekzaklinadla">unpack(&quot;L&quot;, substr(Digest::MD5::md5(Encode::encode(&quot;UTF-8&quot;, <i class="dopln">řetězec</i>)), 0, 4))<span class="prikladhodnoty">⊨ &quot;1834341228&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z112427559"><span><a href="#z112427559">⠹</a></span></span><b>MD5</b> heš řetězce bajtů<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Digest::MD5;</div>
<div class="radekzaklinadla">Digest::MD5::md5_hex(<i class="dopln">řetězec-bajtů</i>)<span class="prikladhodnoty">⊨ &quot;6cd3556deb0da54bca060b4c39479839&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z295410950"><span><a href="#z295410950">ຖ</a></span></span><b>SHA256</b> heš řetězce bajtů<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Digest::SHA;</div>
<div class="radekzaklinadla">Digest::SHA::sha256_hex(<i class="dopln">řetězec-bajtů</i>)<span class="prikladhodnoty">⊨ &quot;315f5bdb76d078c43b8ac0064e4a0164612b1f (<span class="tritecky"></span>)&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1968082358"><span><a href="#z1968082358">⋹</a></span></span><b>SHA1</b> heš řetězce bajtů<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Digest::SHA;</div>
<div class="radekzaklinadla">Digest::SHA::sha1_hex(<i class="dopln">řetězec-bajtů</i>)<span class="prikladhodnoty">⊨ &quot;943a702d06f34599aee1f8da8ef9f7296031d699&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1028039419"><span><a href="#z1028039419">ⴽ</a></span></span><b>SHA512</b> heš řetězce bajtů<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Digest::SHA;</div>
<div class="radekzaklinadla">Digest::SHA::sha512_hex(<i class="dopln">řetězec-bajtů</i>)<span class="prikladhodnoty">⊨ &quot;c1527cd893c124773d811911970c8fe6e857d6 (<span class="tritecky"></span>)&quot;</span></div>
</div></div>

<h2 id="cast6" class="zaklinadla"><a href="#cast6"><span class="cislo">6.</span> Zaklínadla: Pole</a></h2>

<h3 id="cast6x1"><span><a href="#cast6x1" title="kapitola 9 (Perl: základy), sekce 6 (Zaklínadla: Pole), podsekce 1 (Literály (vytvořit pole z prvků))"><sup>6/</sup>1 Literály (vytvořit pole z prvků)</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1971911890"><span><a href="#z1971911890">⚕</a></span></span><b>seznam</b> (obecně/příkady)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc43" id="kapperlzakladyppcr43" title="Prvky seznamu mohou být skaláry (každý utvoří jeden prvek seznamu) nebo pole a vnořené seznamy (každé pole a vnořený seznam se za běhu rozloží na všechny svoje prvky v náležitém pořadí). Tip: skalárem v seznamu může být i nehodnota undef.">(43)</a></sup></div><div class="radky">
<div class="radekzaklinadla">(<span class="volznak">[</span><i class="dopln">prvek seznamu</i><span class="volznak">[</span>, <i class="dopln">další prvek seznamu</i><span class="volznak">]</span><span class="tritecky"></span><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">(1, &quot;&quot;, undef)</div>
<div class="radekzaklinadla">(1 + 1, (2 + 2, 3 + 3), array(&quot;&quot;, undef, &quot;&quot;))</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z680445372"><span><a href="#z680445372">⪓</a></span></span>seznam <b>ze slov</b> (alternativy)<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc44" id="kapperlzakladyppcr44" title="Slovo je v tomto případě každá neprázdná posloupnost nebílých znaků oddělená od ostatních slov alespoň jedním bílým znakem. Uvnitř operátoru qw není možné odzvláštnění a zvláštní význam má pouze odpovídající uzavírací závorka a bílé znaky. Forma se složenými závorkami je vhodnější při víceřádkovém použití.">(44)</a></sup></div><div class="radky">
<div class="radekzaklinadla">qw(<i class="dopln">slova</i>)</div>
<div class="radekzaklinadla">qw{<i class="dopln">slova</i>}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1126604305"><span><a href="#z1126604305">⊡</a></span></span>získat <b>ukazatel</b> na anonymní <b>pole</b><span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">[<span class="volznak">[</span><i class="dopln">prvek seznamu</i><span class="volznak">[</span>, <i class="dopln">další prvek seznamu</i><span class="volznak">]</span><span class="tritecky"></span><span class="volznak">]</span>]</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1043315521"><span><a href="#z1043315521">⣫</a></span></span>seznam celých čísel v daném <b>rozsahu</b> (obecně/příklady)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">(<i class="dopln">celé-číslo</i>..<i class="dopln">celé-číslo</i>)</div>
<div class="radekzaklinadla">(-1..4)<span class="prikladhodnoty">⊨ (-1, 0, 1, 2, 3, 4)</span></div>
<div class="radekzaklinadla">(2..5, -3..-1)<span class="prikladhodnoty">⊨ (2, 3, 4, 5, -3, -2, -1)</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1876579488"><span><a href="#z1876579488">♻</a></span></span><b>zopakovat</b> seznam (obecně/příklad použití)<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">(seznam)</i> x <i class="dopln">počet</i></div>
<div class="radekzaklinadla">my @dvanáct_undefů = (undef) x 12;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1679473228"><span><a href="#z1679473228">⠇</a></span></span>přečíst <b>konstantu</b> typu seznam (obecně)<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">(<i class="dopln">identifikátor</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1050330473"><span><a href="#z1050330473">➧</a></span></span>přečíst konstantu typu seznam (příklad)<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla">use constant můjseznam =&gt; (1, 2, 3, 4);</div>
<div class="radekzaklinadla">my @mojepole = (-1, 0, (můjseznam), 5, 6);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona L" id="z146687101"><span><a href="#z146687101">⏐</a></span></span>seznam znaků UCS v daném kódovém rozsahu (alternativy)<span class="cislo">#8 </span></div><div class="radky">
<div class="radekzaklinadla">(map {chr($ARG)} <i class="dopln">první-kód</i>..<i class="dopln">poslední-kód</i>)</div>
<div class="radekzaklinadla">(map {chr($ARG)} ord(&quot;<i class="dopln">první-znak</i>&quot;)..ord(&quot;<i class="dopln">poslední-znak</i>&quot;))</div>
</div></div>

<h3 id="cast6x2"><span><a href="#cast6x2" title="kapitola 9 (Perl: základy), sekce 6 (Zaklínadla: Pole), podsekce 2 (Základní operace)"><sup>6/</sup>2 Základní operace</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z932456692"><span><a href="#z932456692">⌃</a></span></span>zjistit <b>počet prvků</b> pole<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">alength(<i class="dopln">@pole</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z803981734"><span><a href="#z803981734">Ꙕ</a></span></span><b>přečíst</b> prvek pole (obecně/příklady)<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc45" id="kapperlzakladyppcr45" title="Pokud přistupujete k prvku pole vráceného z volání funkce, musíte celé volání obalit ještě do další úrovně kulatých závorek, např. „(f(1, 2))[5]“. U „f(1, 2)[5]“ Perl ohlásí syntaktickou chybu.">(45)</a></sup></div><div class="radky">
<div class="radekzaklinadla">$<i class="dopln">identifikátor_pole</i>[<i class="dopln">index</i>]</div>
<div class="radekzaklinadla">$mojepole[12]</div>
<div class="radekzaklinadla">my $prvek = (získej_pole(1))[$i];</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z120673942"><span><a href="#z120673942">╤</a></span></span><b>přiřadit</b> prvku pole (obecně/příklad)<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">$<i class="dopln">identifikátor_pole</i>[<i class="dopln">index</i>] = <i class="dopln">skalár</i></div>
<div class="radekzaklinadla">$mojepole[12] = undef</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1440032739"><span><a href="#z1440032739">⁍</a></span></span><b>přiřadit</b> celé pole (alternativy)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">@<i class="dopln">cílové_pole</i> = @<i class="dopln">zdrojové_pole</i></div>
<div class="radekzaklinadla">@<i class="dopln">cílové_pole</i> = <i class="dopln">(seznam)</i></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z511988319"><span><a href="#z511988319">╅</a></span></span><b>rozložit</b> pole do nových skalárních proměnných<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc46" id="kapperlzakladyppcr46" title="Přebytečné prvky pole se zahazují. Přebytečné proměnné se vyplní nehodnotou undef.">(46)</a></sup></div><div class="radky">
<div class="radekzaklinadla">my ($<i class="dopln">id</i><span class="volznak">[</span>, <i class="dopln">$další_id</i><span class="volznak">]</span><span class="tritecky"></span>) = <i class="dopln">@pole</i>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z198265930"><span><a href="#z198265930">⣭</a></span></span>je pole <b>prázdné</b>?<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">alength(<i class="dopln">@pole</i>) == 0</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z61490273"><span><a href="#z61490273">╫</a></span></span>zjistit <b>typy prvků</b> pole<span class="cislo">#7 </span><sup><a href="#kapperlzakladyppc47" id="kapperlzakladyppcr47" title="Funkce typy() s více parametry vrací řetězec, který je konkatenací návratových hodnot pro jednotlivé prvky. Význam jednotlivých částí řetězce je popsán v poznámce pod čarou k příkazu pro zjištění typu skaláru.">(47)</a></sup></div><div class="radky">
<div class="radekzaklinadla">typy(<i class="dopln">@pole</i>)<span class="prikladhodnoty">⊨ &quot;ssuRuA&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z439941960"><span><a href="#z439941960">⎤</a></span></span><b>zopakovat</b> seznam či obsah pole (obecně/příklady)<span class="cislo">#8 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">seznam</i> x <i class="dopln">počet</i></div>
<div class="radekzaklinadla">(&quot;a&quot;, undef) x 2<span class="prikladhodnoty">⊨ (&quot;a&quot;, undef, &quot;a&quot;, undef)</span></div>
<div class="radekzaklinadla">(@test) x 5</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1191002916"><span><a href="#z1191002916">⨗</a></span></span>první/poslední prvek pole<span class="cislo">#9 </span></div><div class="radky">
<div class="radekzaklinadla">$<i class="dopln">identifikátor_pole</i>[0]</div>
<div class="radekzaklinadla">$<i class="dopln">identifikátor_pole</i>[-1]</div>
</div></div>

<h3 id="cast6x3"><span><a href="#cast6x3" title="kapitola 9 (Perl: základy), sekce 6 (Zaklínadla: Pole), podsekce 3 (Vkládání/vyjímání prvků)"><sup>6/</sup>3 Vkládání/vyjímání prvků</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1087522254"><span><a href="#z1087522254">⬠</a></span></span><b>vyjmout</b> první/poslední/určitý prvek pole<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc48" id="kapperlzakladyppcr48" title="Funkce shift() a pop() vracejí vyjmutý prvek.">(48)</a></sup></div><div class="radky">
<div class="radekzaklinadla">shift(<i class="dopln">@pole</i>)</div>
<div class="radekzaklinadla">pop(<i class="dopln">@pole</i>)</div>
<div class="radekzaklinadla">splice(<i class="dopln">@pole</i>, <i class="dopln">index</i>, 1);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z849604474"><span><a href="#z849604474">↱</a></span></span><b>vložit</b> prvek na začátek pole/konec pole/určitý index<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc49" id="kapperlzakladyppcr49" title="Poznámka: vkládání na určitý index může být pomalé.">(49)</a></sup></div><div class="radky">
<div class="radekzaklinadla">unshift(<i class="dopln">@pole</i>, <i class="dopln">skalár</i>);</div>
<div class="radekzaklinadla">push(<i class="dopln">@pole</i>, <i class="dopln">skalár</i>);</div>
<div class="radekzaklinadla">splice(<i class="dopln">@pole</i>, <i class="dopln">index</i>, 0, <i class="dopln">skalár</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z253884650"><span><a href="#z253884650">░</a></span></span><b>smazat</b> všechny prvky/úsek<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">@pole</i> = ();</div>
<div class="radekzaklinadla">splice(<i class="dopln">@pole</i>, <i class="dopln">první-smaz-index</i>, <i class="dopln">počet-ke-smazání</i>);</div>
</div></div>

<h3 id="cast6x4"><span><a href="#cast6x4" title="kapitola 9 (Perl: základy), sekce 6 (Zaklínadla: Pole), podsekce 4 (Filtrování)"><sup>6/</sup>4 Filtrování</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z836032557"><span><a href="#z836032557">⋢</a></span></span>vybrat prvky <b>podle indexu</b> (obecně/příklady)<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">@pole</i>[<i class="dopln">seznam, indexů</i>]</div>
<div class="radekzaklinadla">my @x = (array(0, 10, 20, 30, 40, 50))[1..3];<span class="prikladhodnoty">⊨ (10, 20, 30)</span></div>
<div class="radekzaklinadla">my @x = (array(0, 10, 20, 30, 40, 50))[3, 2, 3];<span class="prikladhodnoty">⊨ (30, 20, 30)</span></div>
<div class="radekzaklinadla">my @a = @pole_prvků[@pole_indexů];</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1092995423"><span><a href="#z1092995423">⣡</a></span></span>vybrat prvky <b>splňující podmínku</b><span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc50" id="kapperlzakladyppcr50" title="Výsledkem je seznam prvků, pro které se poslední příkaz v bloku vyhodnotí jako logická pravda.">(50)</a></sup></div><div class="radky">
<div class="radekzaklinadla">array(grep {</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><i class="dopln">příkaz</i><span class="tritecky"></span></div>
<div class="radekzaklinadla">} <i class="dopln">@pole</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1608640033"><span><a href="#z1608640033">╷</a></span></span>vybrat prvních/posledních N prvků<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc51" id="kapperlzakladyppcr51" title="Pokud je seznam kratší než N prvků, funkce ho vrátí nezměněný.">(51)</a></sup></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use List::Util;</div>
<div class="radekzaklinadla">List::Util::head(<i class="dopln">N</i>, <i class="dopln">seznam</i>)</div>
<div class="radekzaklinadla">List::Util::tail(<i class="dopln">N</i>, <i class="dopln">seznam</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1519125954"><span><a href="#z1519125954">⌃</a></span></span>vybrat sudé/liché prvky z pole o sudém počtu prvků<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use List::Util;</div>
<div class="radekzaklinadla">List::Util::pairkeys(<i class="dopln">seznam</i>)</div>
<div class="radekzaklinadla">List::Util::pairvalues(<i class="dopln">seznam</i>)</div>
</div></div>

<h3 id="cast6x5"><span><a href="#cast6x5" title="kapitola 9 (Perl: základy), sekce 6 (Zaklínadla: Pole), podsekce 5 (Transformace a zpracování pole)"><sup>6/</sup>5 Transformace a zpracování pole</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1065139285"><span><a href="#z1065139285">╙</a></span></span>transformovat <b>po prvcích</b><span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc52" id="kapperlzakladyppcr52" title="Operátor „map“ funguje přesně jako cyklus „foreach (@pole)“ (tzn. v uvedeném bloku je $ARG odkaz na právě zpracovávaný prvek pole), až na to, že jeho návratovou hodnotou je seznam hodnot posledního provedeného příkazu bloku v každém cyklu. Protože je $ARG odkaz, můžete ho využít k modifikaci prvků původního pole.">(52)</a></sup></div><div class="radky">
<div class="radekzaklinadla">(map {</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><i class="dopln">příkaz</i><span class="tritecky"></span></div>
<div class="radekzaklinadla">} <i class="dopln">@pole</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z98058716"><span><a href="#z98058716">⚡</a></span></span>zpracovat pole po N-ticích (destruktivně)<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc53" id="kapperlzakladyppcr53" title="Tip: místo uložení do pole můžete získanou N-tici rovnou rozložit do proměnných, nebo můžete místo funkce splice() použít opakované volání funkce shift(). Poslední N-tice může být neúplná. Pokud chcete přebytečné prvky zahodit, nahraďte podmínku „!= 0“ za „&gt;= N“.">(53)</a></sup></div><div class="radky">
<div class="radekzaklinadla">while (alength(<i class="dopln">@pole</i>) != 0) {</div>
<div class="radekzaklinadla" style="padding-left:2ch;">my @ntice = array(splice(<i class="dopln">@pole</i>, 0, N));</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><i class="dopln">zpracování</i></div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z390033990"><span><a href="#z390033990">☰</a></span></span>sečíst/vynásobit prvky pole<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use List::Util;</div>
<div class="radekzaklinadla">List::Util::sum0(<i class="dopln">seznam</i>)</div>
<div class="radekzaklinadla">List::Util::product(<i class="dopln">seznam</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2078656070"><span><a href="#z2078656070">┉</a></span></span>příklad: ze seznamu celých čísel sudá čísla zdvojit a lichá vynechat<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">my @čísla = (1, 2, 3, 14, 15);</div>
<div class="radekzaklinadla">@čísla = (map {$ARG % 2 == 0 ? ($ARG, $ARG) : ()} @čísla);<span class="prikladhodnoty">⊨ (2, 2, 14, 14)</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1283977285"><span><a href="#z1283977285">⠥</a></span></span>vytvořit pole ukazatelů na pole dvojic ([a, b], [c, d], ...)<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc54" id="kapperlzakladyppcr54" title="Má-li vstup lichý počet prvků, funkce vypíše varování a k utvoření poslední dvojice doplní „undef“.">(54)</a></sup></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use List::Util;</div>
<div class="radekzaklinadla">List::Util::pairs(<i class="dopln">seznam</i>)</div>
</div></div>

<h3 id="cast6x6"><span><a href="#cast6x6" title="kapitola 9 (Perl: základy), sekce 6 (Zaklínadla: Pole), podsekce 6 (Řazení a přeskládání prvků v poli)"><sup>6/</sup>6 Řazení a přeskládání prvků v poli</a></span></h3>
<p class="ponadpisu">
<i>Poznámka</i>: volání funkce „sort“ nemůžete použít v kontextu, kde jsou viditelné vámi deklarované
proměnné $a nebo $b. Proto se deklaraci takových proměnných vyhněte, nebo volání funkce „sort()“
odsuňte do samostatné funkce.
</p>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1325200372"><span><a href="#z1325200372">⠘</a></span></span>seřadit řetězce podle aktuální <b>lokalizace</b> (vzestupně/sestupně)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc55" id="kapperlzakladyppcr55" title="Poznámka: většina lokalizací nerozlišuje velikost písmen a toto rozlišování u nich nelze zapnout; v češtině např. neexistují pravidla pro odlišné řazení „ch“, „CH“, „cH“ a „Ch“.">(55)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> do { use locale; array(sort {$a cmp $b} <i class="dopln">seznam</i>); }</div>
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> do { use locale; array(sort {$b cmp $a} <i class="dopln">seznam</i>); }</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z725929516"><span><a href="#z725929516">ລ</a></span></span>seřadit řetězce podle <b>kódové hodnoty</b> znaků (vzestupně/sestupně)<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> do { no locale; array(sort {$a cmp $b} <i class="dopln">seznam</i>); }</div>
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> do { no locale; array(sort {$b cmp $a} <i class="dopln">seznam</i>); }</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2039944372"><span><a href="#z2039944372">ᔱ</a></span></span><b>obrátit</b> pořadí<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">array(reverse(<i class="dopln">seznam</i>))</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1135999074"><span><a href="#z1135999074">┘</a></span></span><b>náhodně</b> přeskládat<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use List::Util;</div>
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> List::Util::shuffle(<i class="dopln">@pole</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z335706076"><span><a href="#z335706076">◒</a></span></span>seřadit <b>čísla</b> (vzestupně/sestupně)<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc56" id="kapperlzakladyppcr56" title="Pokud si nejste stoprocentně jistý/á, že všechny prvky seznamu (resp. pole) jsou čísla (nebo řetězce vypadající přesně jako čísla), uvažte možnost předběžného přefiltrování seznamu funkcí „grep“ nebo konverzi na čísla funkcí „map“. Porovnávací operátor &lt;=&gt; se může chovat podivně, když se setká s ne-číslem; může vypsat chybové hlášení nebo prvek poslat na konec pole; pravděpodobně však nezpůsobí pád programu.">(56)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> array(sort {$a &lt;=&gt; $b} <i class="dopln">seznam</i>)</div>
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> array(sort {$b &lt;=&gt; $a} <i class="dopln">seznam</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z922961647"><span><a href="#z922961647">⡵</a></span></span>seřadit podle <b>uživatelské</b> porovnávací funkce<span class="cislo">#6 </span><sup><a href="#kapperlzakladyppc57" id="kapperlzakladyppcr57" title="Řadicí blok dostane odkazy na porovnávané skaláry ve speciálních proměnných $a a $b a musí vrátit číslo větší než 0, pokud $a &gt; $b; číslo menší než 0, pokud $a &lt; $b a nulu jinak.">(57)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> array(sort {</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><i class="dopln">příkaz</i><span class="tritecky"></span></div>
<div class="radekzaklinadla">} <i class="dopln">seznam</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z522682165"><span><a href="#z522682165">⠤</a></span></span>seřadit řetězce podle jednotných pravidel <b>Unicode</b> vzestupně (velikost písmen nerozlišovat)<span class="cislo">#7 </span><sup><a href="#kapperlzakladyppc58" id="kapperlzakladyppcr58" title="Úroveň řazení 2 nerozlišuje velikost písmen; úroveň řazení 3 rozlišuje velikost písmen, ale ne znaky se stejnou řadicí váhou; úroveň řazení 4 rozliší i znaky se stejnou řadicí váhou. Tip 1: pro řazení sestupně prohoďte parametry $a a $b. Tip 2: pro proměnnou $porovnávač můžete zvolit jiný identifikátor.">(58)</a></sup></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Unicode::Collate;</div>
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>my $porovnávač = Unicode::Collate-&gt;new(&quot;level&quot;, <i class="dopln">úroveň-řazení</i>);</div>
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> array(sort {$porovnávač-&gt;cmp($a, $b)} <i class="dopln">seznam</i>)</div>
</div></div>

<h3 id="cast6x7"><span><a href="#cast6x7" title="kapitola 9 (Perl: základy), sekce 6 (Zaklínadla: Pole), podsekce 7 (Vyhledávání a testování)"><sup>6/</sup>7 Vyhledávání a testování</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z82630599"><span><a href="#z82630599">ⵔ</a></span></span>najít první prvek vyhovující podmínce (hodnotu/index)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc59" id="kapperlzakladyppcr59" title="Podmínka je jeden nebo více příkazů, kde výsledek posledního příkazu je otestován na logickou hodnotu. Testovaný prvek (resp. index) se předává pomocí speciální proměnné $ARG. Pokud prvek nebude nalezen, funkce vrátí undef.">(59)</a></sup></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use List::Util;</div>
<div class="radekzaklinadla">(List::Util::first { <i class="dopln">podmínka</i> } <i class="dopln">seznam</i>)</div>
<div class="radekzaklinadla">(List::Util::first { <i class="dopln">podmínka</i> } 0..(alength(<i class="dopln">@pole</i>) - 1))</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1730110554"><span><a href="#z1730110554">⧕</a></span></span>najít minimální/maximální číselnou hodnotu<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use List::Util;</div>
<div class="radekzaklinadla">List::Util::min(<i class="dopln">seznam</i>)</div>
<div class="radekzaklinadla">List::Util::max(<i class="dopln">seznam</i>)</div>
</div></div>

<h2 id="cast7" class="zaklinadla"><a href="#cast7"><span class="cislo">7.</span> Zaklínadla: Asociativní pole</a></h2>

<h3 id="cast7x1"><span><a href="#cast7x1" title="kapitola 9 (Perl: základy), sekce 7 (Zaklínadla: Asociativní pole), podsekce 1 (Jako celek)"><sup>7/</sup>1 Jako celek</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1839067594"><span><a href="#z1839067594">⇫</a></span></span><b>literál</b> asociativního pole (jako seznam/jako ukazatel na asociativní pole)<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">(<span class="volznak">[</span><i class="dopln">klíč</i>, <i class="dopln">hodnota</i><span class="volznak">[</span>, <i class="dopln">další klíč</i>, <i class="dopln">další hodnota</i><span class="volznak">]</span><span class="tritecky"></span><span class="volznak">]</span>)</div>
<div class="radekzaklinadla">{<span class="volznak">[</span><i class="dopln">klíč</i>, <i class="dopln">hodnota</i><span class="volznak">[</span>, <i class="dopln">další klíč</i>, <i class="dopln">další hodnota</i><span class="volznak">]</span><span class="tritecky"></span><span class="volznak">]</span>}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1670614490"><span><a href="#z1670614490">䷰</a></span></span>získat <b>počet</b> dvojic v asociativním poli<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">alength(keys(<i class="dopln">%pole</i>))<span class="prikladhodnoty">⊨ 3</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1571598279"><span><a href="#z1571598279">☶</a></span></span>získat <b>pole</b> klíčů/hodnot<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc60" id="kapperlzakladyppcr60" title="Podle dokumentace je pořadí prvků v polích vrácených těmito funkcemi stejné, dokud se dané asociativní pole nezmění. Naopak každá jako změna pravděpodobně změní pořadí prvků vracené oběma funkcemi.">(60)</a></sup></div><div class="radky">
<div class="radekzaklinadla">keys(<i class="dopln">%pole</i>)<span class="prikladhodnoty">⊨ (1, 2, 3)</span></div>
<div class="radekzaklinadla">values(<i class="dopln">%pole</i>)<span class="prikladhodnoty">⊨ (&quot;&quot;, undef, &quot;xyz&quot;)</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z759421039"><span><a href="#z759421039">↷</a></span></span><b>transpozice</b> (klíče na hodnoty a hodnoty na klíče)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla"><a href="#" class="reseninezname" title="Řešení tohoto příkladu nebylo při vydání této verze kapitoly známo.">?</a></div>
</div></div>

<h3 id="cast7x2"><span><a href="#cast7x2" title="kapitola 9 (Perl: základy), sekce 7 (Zaklínadla: Asociativní pole), podsekce 2 (Prvky)"><sup>7/</sup>2 Prvky</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1922125418"><span><a href="#z1922125418">☯</a></span></span><b>přečíst</b> prvek asociativního pole/<b>přiřadit</b> do něj/příklad<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc61" id="kapperlzakladyppcr61" title="Pokud prvek neexistuje, čtení vrací undef a přiřazení prvek vytvoří.">(61)</a></sup></div><div class="radky">
<div class="radekzaklinadla">$<i class="dopln">identifikátor</i>{<i class="dopln">klíč</i>}</div>
<div class="radekzaklinadla">$<i class="dopln">identifikátor</i>{<i class="dopln">klíč</i>} = <i class="dopln">hodnota</i></div>
<div class="radekzaklinadla">$apole{&quot;abc&quot;} = &quot;def&quot;;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1912443824"><span><a href="#z1912443824">✶</a></span></span><b>smazat</b> prvek/všechny prvky<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc62" id="kapperlzakladyppcr62" title="Pokus o smazání neexistujícího prvku je tiše ignorován.">(62)</a></sup></div><div class="radky">
<div class="radekzaklinadla">delete $<i class="dopln">id_pole</i>{<i class="dopln">klíč</i>};</div>
<div class="radekzaklinadla"><i class="dopln">%pole</i> = ();</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1117217267"><span><a href="#z1117217267">⡰</a></span></span><b>obsahuje</b> prvek?<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">exists($<i class="dopln">identifikátor</i>{<i class="dopln">klíč</i>})</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z396238124"><span><a href="#z396238124">⁀</a></span></span><b>přidat</b> či přepsat prvek<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">$<i class="dopln">identifikátor</i>{<i class="dopln">klíč</i>} = <i class="dopln">hodnota</i></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z60560596"><span><a href="#z60560596">╃</a></span></span>přiřadit hodnoty více prvkům najednou (obecně/příklady)<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">@<i class="dopln">identifikátor</i>{<i class="dopln">seznam, klíčů</i>} = <i class="dopln">(seznam, hodnot)</i>;</div>
<div class="radekzaklinadla">@apole{&quot;a&quot;, &quot;b&quot;} = (&quot;A&quot;, &quot;B&quot;);</div>
<div class="radekzaklinadla">@apole{@klíče} = @hodnoty;</div>
<div class="radekzaklinadla">@apole{@klíče} = (&quot;xyz&quot;) x alength(@klíče);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z523249396"><span><a href="#z523249396">⚚</a></span></span>smazat prvky splňující podmínku<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla"><a href="#" class="reseninezname" title="Řešení tohoto příkladu nebylo při vydání této verze kapitoly známo.">?</a></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1385128865"><span><a href="#z1385128865">⌝</a></span></span>vytvořit pole výběrem prvků z asoc. pole (přímo/přes ukazatel)<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla"><span class="volznak">[</span><i class="dopln">@pole</i> =<span class="volznak">]</span> @<i class="dopln">identifikátor</i>{<i class="dopln">seznam, klíčů</i>}</div>
<div class="radekzaklinadla"><a href="#" class="reseninezname" title="Řešení tohoto příkladu nebylo při vydání této verze kapitoly známo.">?</a></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1360672816"><span><a href="#z1360672816">⪏</a></span></span>smazat více prvků najednou (přímo/přes ukazatel)<span class="cislo">#8 </span></div><div class="radky">
<div class="radekzaklinadla">delete @<i class="dopln">identifikátor</i>{<i class="dopln">seznam, klíčů</i>};</div>
<div class="radekzaklinadla"><a href="#" class="reseninezname" title="Řešení tohoto příkladu nebylo při vydání této verze kapitoly známo.">?</a></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1819556086"><span><a href="#z1819556086">↢</a></span></span>smazat prvek přes ukazatel na asociativní pole<span class="cislo">#9 </span></div><div class="radky">
<div class="radekzaklinadla">delete <i class="dopln">$ukazatel</i>-&gt;{<i class="dopln">klíč</i>};</div>
</div></div>

<h2 id="cast8" class="zaklinadla"><a href="#cast8"><span class="cislo">8.</span> Zaklínadla: Ukazatelé</a></h2>

<h3 id="cast8x1"><span><a href="#cast8x1" title="kapitola 9 (Perl: základy), sekce 8 (Zaklínadla: Ukazatelé), podsekce 1 (Ukazatelé obecně)"><sup>8/</sup>1 Ukazatelé obecně</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1656698472"><span><a href="#z1656698472">⎔</a></span></span>je skalár ukazatel?<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">defined(ref(<i class="dopln">$skalár</i>))</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1586441297"><span><a href="#z1586441297">▭</a></span></span>zjistit typ odkazovaného objektu (alternativy)<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc63" id="kapperlzakladyppcr63" title="Pro interpretaci návratové hodnoty funkce typy() vyhledejte poznámku pod čarou k zaklínadlu „zjistit typ skaláru“ v této kapitole. Pro interpretaci návratové hodnoty funkce ref() hledejte v dokumentaci Perlu.">(63)</a></sup></div><div class="radky">
<div class="radekzaklinadla">typy(<i class="dopln">$skalár</i>)</div>
<div class="radekzaklinadla">ref(<i class="dopln">$skalár</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1841750327"><span><a href="#z1841750327">⬅</a></span></span>odkazují dva ukazatelé na tentýž objekt?<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Scalar::Util;</div>
<div class="radekzaklinadla">Scalar::Util::refaddr(<i class="dopln">$a</i>) == Scalar::Util::refaddr(<i class="dopln">$b</i>)</div>
</div></div>

<h3 id="cast8x2"><span><a href="#cast8x2" title="kapitola 9 (Perl: základy), sekce 8 (Zaklínadla: Ukazatelé), podsekce 2 (Získat ukazatel)"><sup>8/</sup>2 Získat ukazatel</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona L" id="z637555358"><span><a href="#z637555358">〗</a></span></span>získat ukazatel na <b>proměnnou</b>: skalár/pole/asociativní pole<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">\$<i class="dopln">identifkátor_skalární_proměnné</i></div>
<div class="radekzaklinadla">\@<i class="dopln">identifkátor_pole</i></div>
<div class="radekzaklinadla">\%<i class="dopln">identifkátor_asociativního_pole</i></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z333152390"><span><a href="#z333152390">⢙</a></span></span>získat ukazatel na pojmenovanou <b>funkci</b>/anonymní funkci<span class="cislo">#2 </span><sup><a href="#kapperlzakladyppc64" id="kapperlzakladyppcr64" title="Analogicky můžete ukazatel na anonymní funkci předat jako parametr jiné funkci. Poznámka: raději se nesnažte získávat ukazatele na vestavěné funkce Perlu; pravděpodobně to nebude fungovat.">(64)</a></sup></div><div class="radky">
<div class="radekzaklinadla">\&amp;<i class="dopln">identifkátor_funkce</i></div>
<div class="radekzaklinadla">sub {<span class="volznak">[</span><i class="dopln">příkazy</i><span class="volznak">]</span><span class="tritecky"></span>}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z428879293"><span><a href="#z428879293">⊨</a></span></span>získat ukazatel na <b>regulární výraz</b> (obecně/příklad)<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">qr/<i class="dopln">regulární výraz</i>/</div>
<div class="radekzaklinadla">$můjVýraz = qr/^ab\.c/</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1660108226"><span><a href="#z1660108226">┉</a></span></span>získat ukazatel na <b>prvek pole</b>/hodnotu v asociativním poli<span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc65" id="kapperlzakladyppcr65" title="Poznámka: klíče v asociativním poli jsou nepřiřaditelné, proto ukazatel na ně nelze získat.">(65)</a></sup></div><div class="radky">
<div class="radekzaklinadla">\$<i class="dopln">identifkátor_pole</i>[<i class="dopln">index</i>]</div>
<div class="radekzaklinadla">\$<i class="dopln">identifkátor_asociativního_pole</i>{<i class="dopln">klíč</i>}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2030734972"><span><a href="#z2030734972">꜖</a></span></span>získat ukazatel na <b>anonymní objekt</b>: skalár/pole/asociativní pole<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">\(<i class="dopln">hodnota-nebo-undef</i>)</div>
<div class="radekzaklinadla">[<i class="dopln">seznam</i>]</div>
<div class="radekzaklinadla">{<i class="dopln">seznam,dvojic</i>}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1901188422"><span><a href="#z1901188422">⊬</a></span></span>získat ukazatel na hodnotu v asociativním poli dostupném přes ukazatel<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">\$<i class="dopln">ukazatel-na-asoc-pole</i>-&gt;{<i class="dopln">klíč</i>}</div>
</div></div>

<h3 id="cast8x3"><span><a href="#cast8x3" title="kapitola 9 (Perl: základy), sekce 8 (Zaklínadla: Ukazatelé), podsekce 3 (Dereferencovat ukazatel)"><sup>8/</sup>3 Dereferencovat ukazatel</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1005106892"><span><a href="#z1005106892">⤊</a></span></span><b>přistoupit</b> přes ukazatel ke skaláru/poli/asociativnímu poli/funkci<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc66" id="kapperlzakladyppcr66" title="Uvnitř složených závorek zde nemusí být jen proměnná, ale může to být jakýkoliv výraz, který vrátí příslušný ukazatel (např. volání funkce).">(66)</a></sup></div><div class="radky">
<div class="radekzaklinadla">${$<i class="dopln">identifikátor_ukazatele</i>}</div>
<div class="radekzaklinadla">@{$<i class="dopln">identifikátor_ukazatele</i>}</div>
<div class="radekzaklinadla">%{$<i class="dopln">identifikátor_ukazatele</i>}</div>
<div class="radekzaklinadla">&amp;{$<i class="dopln">identifikátor_ukazatele</i>}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z142004759"><span><a href="#z142004759">۳</a></span></span>zavolat přes ukazatel <b>funkci</b><span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$ukazatel</i>-&gt;(<i class="dopln">seznam, parametrů</i><span class="tritecky"></span>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1646638908"><span><a href="#z1646638908">┼</a></span></span>přistoupit k prvku pole/asociativního pole dostupného přes ukazatel<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$ukazatel</i>-&gt;[<i class="dopln">index</i>]</div>
<div class="radekzaklinadla"><i class="dopln">$ukazatel</i>-&gt;{<i class="dopln">klíč</i>}</div>
</div></div>

<h3 id="cast8x4"><span><a href="#cast8x4" title="kapitola 9 (Perl: základy), sekce 8 (Zaklínadla: Ukazatelé), podsekce 4 (Slabé ukazatele)"><sup>8/</sup>4 Slabé ukazatele</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1010389560"><span><a href="#z1010389560">∗</a></span></span><b>změnit</b> ukazatel na slabý<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Scalar::Util;</div>
<div class="radekzaklinadla">Scalar::Util::weaken(<i class="dopln">$ukazatel</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1936432142"><span><a href="#z1936432142">໕</a></span></span>je ukazatel slabý?<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Scalar::Util;</div>
<div class="radekzaklinadla">Scalar::Util::isweak(<i class="dopln">$ukazatel</i>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1193245782"><span><a href="#z1193245782">✴</a></span></span>změnit slabý ukazatel zpět na silný<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Scalar::Util;</div>
<div class="radekzaklinadla">Scalar::Util::unweaken(<i class="dopln">$ukazatel</i>);</div>
</div></div>

<h2 id="cast9" class="zaklinadla"><a href="#cast9"><span class="cislo">9.</span> Zaklínadla: Vstup/výstup</a></h2>

<h3 id="cast9x1"><span><a href="#cast9x1" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 1 (Otevřít/zavřít)"><sup>9/</sup>1 Otevřít/zavřít</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z278590473"><span><a href="#z278590473">⇘</a></span></span><b>zavřít</b> proud<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">close(<i class="dopln">$proud</i>) <span class="volznak">[</span>or die(<i class="dopln">zpráva</i>)<span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z644225843"><span><a href="#z644225843">❮</a></span></span>získat <b>standardní</b> vstup/standardní výstup/standardní chybový výstup<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">my <i class="dopln">$proud</i> = \*STDIN; <span class="volznak">[</span>binmode(<i class="dopln">$proud</i>, &quot;:raw&quot;);<span class="volznak">]</span></div>
<div class="radekzaklinadla">my <i class="dopln">$proud</i> = \*STDOUT; <span class="volznak">[</span>binmode(<i class="dopln">$proud</i>, &quot;:raw&quot;);<span class="volznak">]</span></div>
<div class="radekzaklinadla">my <i class="dopln">$proud</i> = \*STDERR; <span class="volznak">[</span>binmode(<i class="dopln">$proud</i>, &quot;:raw&quot;);<span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z724053184"><span><a href="#z724053184">♢</a></span></span>otevřít soubor jako <b>textový</b> (normálně/se striktními kontrolami)<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc67" id="kapperlzakladyppcr67" title="Režim je jeden z: „&lt;“: otevřít existující soubor pro čtení; „&gt;“: vytvořit nový/přepsat existující soubor a otevřít pro zápis; „&gt;&gt;“: otevřít pro zápis na konec souboru.">(67)</a></sup></div><div class="radky">
<div class="radekzaklinadla">open(my <i class="dopln">$proud</i>, &quot;<i class="dopln">režim</i>:utf8&quot;, <i class="dopln">&quot;cesta/k/souboru&quot;</i>) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybová zpráva&quot;</i>)<span class="volznak">]</span>;</div>
<div class="radekzaklinadla">open(my <i class="dopln">$proud</i>, &quot;<i class="dopln">režim</i>:encoding(UTF-8)&quot;, <i class="dopln">&quot;cesta/k/souboru&quot;</i>) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybová zpráva&quot;</i>)<span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1108975731"><span><a href="#z1108975731">⇼</a></span></span>otevřít soubor jako <b>binární</b><span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc68" id="kapperlzakladyppcr68" title="Režim je jeden z: „&lt;“: otevřít existující soubor pro čtení; „+&lt;“: otevřít existující soubor pro čtení i zápis; „&gt;“: vytvořit nový/přepsat existující soubor a otevřít jen pro zápis; „+&gt;“: totéž, ale pro zápis i čtení; „&gt;&gt;“: otevřít soubor pro zápis na konec.">(68)</a></sup></div><div class="radky">
<div class="radekzaklinadla">open(my <i class="dopln">$proud</i>, &quot;<i class="dopln">režim</i>:raw&quot;, <i class="dopln">&quot;cesta/k/souboru&quot;</i>) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybová zpráva&quot;</i>)<span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1020454667"><span><a href="#z1020454667">⇑</a></span></span>otevřít <b>rouru</b> pro zápis/pro čtení<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">open(my <i class="dopln">$proud</i>, &quot;|-&quot;, &quot;<i class="dopln">název-příkazu</i>&quot;<span class="volznak">[</span>, <i class="dopln">parametr-příkazu</i><span class="volznak">]</span><span class="tritecky"></span>) <span class="volznak">[</span>or die(<i class="dopln">zpráva</i>)<span class="volznak">]</span>; <span class="volznak">[</span>binmode(<i class="dopln">$proud</i>, &quot;:raw&quot;);<span class="volznak">]</span></div>
<div class="radekzaklinadla">open(my <i class="dopln">$proud</i>, &quot;-|&quot;, &quot;<i class="dopln">název-příkazu</i>&quot;<span class="volznak">[</span>, <i class="dopln">parametr-příkazu</i><span class="volznak">]</span><span class="tritecky"></span>) <span class="volznak">[</span>or die(<i class="dopln">zpráva</i>)<span class="volznak">]</span>; <span class="volznak">[</span>binmode(<i class="dopln">$proud</i>, &quot;:raw&quot;);<span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1902074748"><span><a href="#z1902074748">⢡</a></span></span>otevřít číslovaný vstup či výstup<span class="cislo">#6 </span><sup><a href="#kapperlzakladyppc69" id="kapperlzakladyppcr69" title="Deskriptory jsou číslované proudy, které typicky otevírá bash před spuštěním každého procesu. Deskriptory číslo 0, 1 a 2 se nazývají „standardní vstup“, „standardní výstup“ a „standardní chybový výstup. Režim je v tomto případě buď „&lt;“ pro čtení z deskriptoru, nebo „&gt;“ pro zápis do deskriptoru.“">(69)</a></sup></div><div class="radky">
<div class="radekzaklinadla">open(my <i class="dopln">$proud</i>, &quot;<i class="dopln">režim</i>&amp;=<i class="dopln">číslo</i>&quot;) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybová zpráva&quot;</i>)<span class="volznak">]</span>; <span class="volznak">[</span>binmode(<i class="dopln">$proud</i>, &quot;:raw&quot;);<span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z673804617"><span><a href="#z673804617">∫</a></span></span><b>přepnout režim</b> proudu na binární/textový<span class="cislo">#7 </span><sup><a href="#kapperlzakladyppc70" id="kapperlzakladyppcr70" title="Tento příkaz nesmí být použit poté, co už bylo s proudem od otevření manipulováno (např. čtením, zápisem, přesouváním apod.) Proto ho doporučuji používat jen okamžitě po otevření proudu.">(70)</a></sup></div><div class="radky">
<div class="radekzaklinadla">binmode(<i class="dopln">$proud</i>, &quot;:raw&quot;);</div>
<div class="radekzaklinadla">binmode(<i class="dopln">$proud</i>, &quot;:utf8&quot;);</div>
</div></div>

<h3 id="cast9x2"><span><a href="#cast9x2" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 2 (Standardní výstup a chybová hlášení)"><sup>9/</sup>2 Standardní výstup a chybová hlášení</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1571941261"><span><a href="#z1571941261">⪑</a></span></span>vypsat <b>položky seznamu</b> oddělené hodnotou $OFS a zakončené hodnotou $ORS<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">print(<i class="dopln">položky, seznamu</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1454451509"><span><a href="#z1454451509">↵</a></span></span><b>printf()</b><span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">printf(<i class="dopln">&quot;formátovací řetězec&quot;</i><span class="volznak">[</span>, <i class="dopln">parametry</i><span class="tritecky"></span><span class="volznak">]</span>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1813148383"><span><a href="#z1813148383">↦</a></span></span>vypsat <b>řetězec</b><span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">printf(&quot;%s&quot;, <i class="dopln">výraz-typu-řetězec</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1941645359"><span><a href="#z1941645359">⎩</a></span></span>vypsat datovou strukturu pro člověka (zejména pro účely ladění)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Data::Dumper;</div>
<div class="radekzaklinadla">printf(&quot;%s&quot;, Dumper(<i class="dopln">seznam</i>));</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z351203275"><span><a href="#z351203275">☈</a></span></span>vypsat <b>varování</b> ohedně tohoto místa/místa ve volající funkci na standardní chybový výstup<span class="cislo">#5 </span><sup><a href="#kapperlzakladyppc71" id="kapperlzakladyppcr71" title="Perl doplní chybové hlášení o označení zdrojového kódu a číslo řádku.">(71)</a></sup></div><div class="radky">
<div class="radekzaklinadla">warn(<i class="dopln">&quot;zpráva&quot;</i>);</div>
<div class="radekzaklinadla">carp(<i class="dopln">&quot;zpráva&quot;</i>);</div>
</div></div>

<h3 id="cast9x3"><span><a href="#cast9x3" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 3 (Čtení (vstup) v textovém režimu)"><sup>9/</sup>3 Čtení (vstup) v textovém režimu</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1510785597"><span><a href="#z1510785597">▖</a></span></span>načíst řádek bez ukončovače<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc72" id="kapperlzakladyppcr72" title="Při čtení za koncem souboru se do proměnné $cíl uloží nehodnota undef.">(72)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$cíl</i> = scalar(readline(<i class="dopln">$proud</i>));</div>
<div class="radekzaklinadla">chomp(<i class="dopln">$cíl</i>) if (defined(<i class="dopln">$cíl</i>));</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1975191518"><span><a href="#z1975191518">⇲</a></span></span>načíst všechny zbývající řádky bez ukončovačů do pole<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">@cíl</i> = array(readline(<i class="dopln">$f</i>));</div>
<div class="radekzaklinadla">chomp(<i class="dopln">@cíl</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1032733131"><span><a href="#z1032733131">⟲</a></span></span>načíst N znaků (N≥1)/1 znak<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc73" id="kapperlzakladyppcr73" title="Podle manuálu tyto funkce nejsou příliš efektivní; je vhodnější raději načítat po řádcích s ukončovačem a každou řádku rozdělit po znacích. Při čtení za koncem souboru funkce vracejí undef.">(73)</a></sup></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$cíl</i> = do {local $RS = \(<i class="dopln">N</i>); scalar(readline(<i class="dopln">$proud</i>));}</div>
<div class="radekzaklinadla"><i class="dopln">$cíl</i> = getc(<i class="dopln">$proud</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1511678825"><span><a href="#z1511678825">⢔</a></span></span>načíst celý zbytek souboru do řetězce<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$cíl</i> = do {local $RS = undef; scalar(readline(<i class="dopln">$proud</i>));}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1497122430"><span><a href="#z1497122430">⇋</a></span></span>načíst řádku/všechny zbývající řádky s ukončovačem<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$cíl</i> = scalar(readline(<i class="dopln">$proud</i>));</div>
<div class="radekzaklinadla"><i class="dopln">@cíl</i> = array(readline(<i class="dopln">$f</i>));</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z945928697"><span><a href="#z945928697">⊉</a></span></span>načíst a zahodit všechny zbývající řádky<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">while (defined(scalar(readline(<i class="dopln">$proud</i>)))) {}</div>
</div></div>

<h3 id="cast9x4"><span><a href="#cast9x4" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 4 (Zápis (výstup) v textovém režimu)"><sup>9/</sup>4 Zápis (výstup) v textovém režimu</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1571941261x"><span><a href="#z1571941261x">⪑</a></span></span>vypsat <b>položky seznamu</b> oddělené hodnotou $OFS a zakončené hodnotou $ORS<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">fprint(<i class="dopln">$proud</i>, <i class="dopln">položky, seznamu</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1454451509x"><span><a href="#z1454451509x">↵</a></span></span><b>printf()</b><span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">fprintf(<i class="dopln">$proud</i>, <i class="dopln">&quot;formátovací řetězec&quot;</i><span class="volznak">[</span>, <i class="dopln">parametry</i><span class="tritecky"></span><span class="volznak">]</span>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1813148383x"><span><a href="#z1813148383x">↦</a></span></span>vypsat <b>řetězec</b><span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">fprintf(<i class="dopln">$proud</i>, &quot;%s&quot;, <i class="dopln">řetězec</i>);</div>
</div></div>

<h3 id="cast9x5"><span><a href="#cast9x5" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 5 (Čtení (vstup) v binárním režimu)"><sup>9/</sup>5 Čtení (vstup) v binárním režimu</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z846137074"><span><a href="#z846137074">≏</a></span></span>načíst pevný <b>maximální počet bajtů</b><span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">read(<i class="dopln">$proud</i>, <i class="dopln">$proměnná-cíl</i>, <i class="dopln">max-bajtů</i><span class="volznak">[</span>, <i class="dopln">počáteční-index-do-cíle</i><span class="volznak">]</span>)</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1777512914"><span><a href="#z1777512914">┚</a></span></span>načíst jeden <b>bajt</b><span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$cíl</i> = getc(<i class="dopln">$proud</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z589072143"><span><a href="#z589072143">⪅</a></span></span>načíst celý <b>zbytek souboru</b> do řetězce bajtů<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">$cíl</i> = do {local $RS = undef; scalar(readline(<i class="dopln">$proud</i>));}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2035836497"><span><a href="#z2035836497">≑</a></span></span>konvertovat bajty z řetězce na pole číselných hodnot<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla"><i class="dopln">@cíl</i> = unpack(&quot;C*&quot;, <i class="dopln">$řetězec</i>);</div>
</div></div>

<h3 id="cast9x6"><span><a href="#cast9x6" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 6 (Zápis a ostatní operace v binárním režimu)"><sup>9/</sup>6 Zápis a ostatní operace v binárním režimu</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z597055993"><span><a href="#z597055993">⚋</a></span></span>zapsat bajty (z řetězce bajtů/z pole čísel)<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">fprintf(<i class="dopln">$proud</i>, &quot;%s&quot;, <i class="dopln">řetězec</i>);</div>
<div class="radekzaklinadla">fprintf(<i class="dopln">$proud</i>, &quot;%s&quot;, pack(&quot;C*&quot;, <i class="dopln">řetězec</i>));</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z103779482"><span><a href="#z103779482">⋠</a></span></span>zapsat bajt (znak/z číselné hodnoty)<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">fprintf(<i class="dopln">$proud</i>, &quot;%s&quot;, <i class="dopln">$znak</i>);</div>
<div class="radekzaklinadla">fprintf(<i class="dopln">$proud</i>, &quot;%c&quot;, <i class="dopln">$číslo</i>);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1558185485"><span><a href="#z1558185485">⡀</a></span></span>přesun na pozici N bajtů od začátku/od konce/od akt. pozice vpřed/od akt. poz. vzad (nepoužívat na roury)<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">seek(<i class="dopln">$f</i>, <i class="dopln">N</i>, 0);</div>
<div class="radekzaklinadla">seek(<i class="dopln">$f</i>, -<i class="dopln">N</i>, 2);</div>
<div class="radekzaklinadla">seek(<i class="dopln">$f</i>, <i class="dopln">N</i>, 1);</div>
<div class="radekzaklinadla">seek(<i class="dopln">$f</i>, -<i class="dopln">N</i>, 1);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z713896870"><span><a href="#z713896870">⩫</a></span></span>zjistit pozici v bajtech od začátku souboru (nepoužívat na roury)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">tell(<i class="dopln">$f</i>)<span class="prikladhodnoty">⊨ 737</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z197759440"><span><a href="#z197759440">ⵓ</a></span></span><b>zkrátit</b> soubor otevřený pro zápis (nepoužívat na roury)<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">truncate(<i class="dopln">$proud</i>, <i class="dopln">délka-v-bajtech</i>) <span class="volznak">[</span>&amp;&amp; seek(<i class="dopln">$f</i>, <i class="dopln">nová-pozice</i>, <i class="dopln">odkud</i>)<span class="volznak">]</span></div>
</div></div>

<h3 id="cast9x7"><span><a href="#cast9x7" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 7 (Operace se soubory a pevnými a symbolickými odkazy)"><sup>9/</sup>7 Operace se soubory a pevnými a symbolickými odkazy</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z72339269"><span><a href="#z72339269">䷶</a></span></span>nastavit <b>mód</b> (přístupová práva)(obecně/příklad)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc74" id="kapperlzakladyppcr74" title="Pozor! Mód je zde interpretován v oktalové soustavě, proto ho tak zpravidla musíte zadat. Pokud ho zadáte v desítkové soustavě (např. „777“), nebude fungovat.">(74)</a></sup></div><div class="radky">
<div class="radekzaklinadla">chmod(<i class="dopln">číslo</i>, <i class="dopln">cesta</i><span class="tritecky"></span>);</div>
<div class="radekzaklinadla">chmod(04777, &quot;../a.txt&quot;, &quot;b.txt&quot;);</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1339181642"><span><a href="#z1339181642">☢</a></span></span><b>přejmenovat</b> soubor<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">rename(<i class="dopln">&quot;původní název&quot;</i>, <i class="dopln">&quot;nový název&quot;</i>) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybové hlášení&quot;</i>)<span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2029140632"><span><a href="#z2029140632">⋇</a></span></span>vytvořit <b>pevný odkaz</b> na soubor<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla">link(<i class="dopln">&quot;$původní/cesta&quot;</i>, <i class="dopln">&quot;nová/cesta&quot;</i>) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybové hlášení&quot;</i>)<span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z131953833"><span><a href="#z131953833">┡</a></span></span>vytvořit <b>symbolický odkaz</b> (obecně/příklad)<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">symlink(<i class="dopln">&quot;obsah odkazu&quot;</i>, <i class="dopln">&quot;cesta/k/odkazu&quot;</i>) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybové hlášení&quot;</i>)<span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z430663626"><span><a href="#z430663626">♀</a></span></span><b>odstranit</b> soubor či symbolický odkaz<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">unlink(<i class="dopln">cesta</i>) <span class="volznak">[</span>or <i class="dopln">zpracovat chybu</i><span class="volznak">]</span></div>
</div></div>

<h3 id="cast9x8"><span><a href="#cast9x8" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 8 (Operace s adresáři)"><sup>9/</sup>8 Operace s adresáři</a></span></h3>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z2015903259"><span><a href="#z2015903259">≦</a></span></span>získat pole <b>názvů položek</b> v adresáři<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc75" id="kapperlzakladyppcr75" title="Pozor, získané pole bude obsahovat i zvláštní položky „.“ a „..“ a všechny skryté soubory a adresáře. Možná budete vrácené pole chtít přefiltrovat funkcí grep() a seřadit.">(75)</a></sup></div><div class="radky">
<div class="radekzaklinadla">if (opendir(my $<i class="dopln">identifikátor</i>, <i class="dopln">$cesta</i>)) {</div>
<div class="radekzaklinadla" style="padding-left:2ch;"><i class="dopln">@pole</i> = array(readdir($<i class="dopln">identifikátor</i>));</div>
<div class="radekzaklinadla" style="padding-left:2ch;">closedir($<i class="dopln">identifikátor</i>);</div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1785656719"><span><a href="#z1785656719">⠂</a></span></span>změnit aktuální adresář<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">chdir(<i class="dopln">cesta</i>) <span class="volznak">[</span>or die(<i class="dopln">...</i>)<span class="volznak">]</span>;</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z48220521"><span><a href="#z48220521">✑</a></span></span><b>zjistit</b> aktuální adresář<span class="cislo">#3 </span></div><div class="radky">
<div class="radekzaklinadla dopreambule"><span title="Takto označený řádek patří do preambule zdrojového kódu či do záhlaví skriptu.">^</span>use Cwd;</div>
<div class="radekzaklinadla">getcwd()<span class="prikladhodnoty">⊨ &quot;/home/alena/linux-spellbook&quot;</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1961086773"><span><a href="#z1961086773">ⵯ</a></span></span><b>vytvořit</b> adresář<span class="cislo">#4 </span></div><div class="radky">
<div class="radekzaklinadla">mkdir(<i class="dopln">$cesta</i>) <span class="volznak">[</span>or <i class="dopln">zpracovat chybu</i><span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1024814821"><span><a href="#z1024814821">☗</a></span></span><b>odstranit</b> prázdný adresář<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">rmdir(<i class="dopln">$cesta</i>) <span class="volznak">[</span>or <i class="dopln">zpracovat chybu</i><span class="volznak">]</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1547007463"><span><a href="#z1547007463">⋲</a></span></span><b>přejmenovat</b> adresář<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">rename(<i class="dopln">&quot;původní název&quot;</i>, <i class="dopln">&quot;nový název&quot;</i>) <span class="volznak">[</span>or die(<i class="dopln">&quot;chybové hlášení&quot;</i>)<span class="volznak">]</span>;</div>
</div></div>

<h3 id="cast9x9"><span><a href="#cast9x9" title="kapitola 9 (Perl: základy), sekce 9 (Zaklínadla: Vstup/výstup), podsekce 9 (Zjistit informace o adresářové položce)"><sup>9/</sup>9 Zjistit informace o adresářové položce</a></span></h3>
<p class="ponadpisu">
Poznámka: v případě, že funkce stat() selže, vrátí prázné pole; proto čtení jeho kteréhokoliv prvku vrátí undef. Mód a typ adresářové položky budou v takovém případě 0.
</p>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1994330254"><span><a href="#z1994330254">♄</a></span></span><b>typ</b> adresářové položky (s následováním symb. odkazů/bez následování)<span class="cislo">#1 </span><sup><a href="#kapperlzakladyppc76" id="kapperlzakladyppcr76" title="Typ je: 1 pro pojmenovanou rouru; 2 pro znakové zařízení; 4 pro adresář; 6 pro blokové zařízení; 8 pro soubor; 10 pro symbolický odkaz (jen u funkce „lstat“!) a 12 pro soket.">(76)</a></sup></div><div class="radky">
<div class="radekzaklinadla">((stat(<i class="dopln">&quot;cesta&quot;</i>))[2] // 0) &gt;&gt; 12<span class="prikladhodnoty">⊨ 8</span></div>
<div class="radekzaklinadla">((lstat(<i class="dopln">&quot;cesta&quot;</i>))[2] // 0) &gt;&gt; 12<span class="prikladhodnoty">⊨ 10</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1831621929"><span><a href="#z1831621929">≨</a></span></span><b>velikost</b> v bajtech<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[7]<span class="prikladhodnoty">⊨ 15543</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1154016896"><span><a href="#z1154016896">ᔲ</a></span></span><b>čas</b> změněno/čteno<span class="cislo">#3 </span><sup><a href="#kapperlzakladyppc77" id="kapperlzakladyppcr77" title="Čas se vrací jako celočíselná časová známka Unixu.">(77)</a></sup></div><div class="radky">
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[9]<span class="prikladhodnoty">⊨ 1607766627</span></div>
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[8]<span class="prikladhodnoty">⊨ 1607766627</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z67541939"><span><a href="#z67541939">⢏</a></span></span><b>mód</b><span class="cislo">#4 </span><sup><a href="#kapperlzakladyppc78" id="kapperlzakladyppcr78" title="Mód se vrací jako číslo. Pravděpodobně ho budete chtít vypsat v čitelné podobě funkcí „printf()“ s formátem &quot;%04o&quot;.">(78)</a></sup></div><div class="radky">
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[2] // 0 &amp; 07777<span class="prikladhodnoty">⊨ 436</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1670530842"><span><a href="#z1670530842">䷓</a></span></span>vlastník/skupina (obojí číselně)<span class="cislo">#5 </span></div><div class="radky">
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[4]<span class="prikladhodnoty">⊨ 1000</span></div>
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[5]<span class="prikladhodnoty">⊨ 1000</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z692800727"><span><a href="#z692800727">↛</a></span></span>počet pevných odkazů<span class="cislo">#6 </span></div><div class="radky">
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[3]<span class="prikladhodnoty">⊨ 1</span></div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1332347609"><span><a href="#z1332347609">┒</a></span></span>číslo zařízení/i-uzlu<span class="cislo">#7 </span></div><div class="radky">
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[0]<span class="prikladhodnoty">⊨ 47</span></div>
<div class="radekzaklinadla">(stat(<i class="dopln">&quot;cesta&quot;</i>))[1]<span class="prikladhodnoty">⊨ 4</span></div>
</div></div>

<h2 id="cast10"><a href="#cast10"><span class="cislo">10.</span> Parametry příkazů</a></h2>
<div class="zaklinadlo"><div class="radky">
<div class="radekzaklinadla">lkk perl <span class="volznak">[</span><i class="dopln">parametry Perlu</i><span class="volznak">]</span> <i class="dopln">soubor-skriptu.pl</i> <span class="volznak">[</span><i class="dopln">parametry skriptu</i><span class="volznak">]</span></div>
<div class="radekzaklinadla">lkk perl -ne <i class="dopln">'skript'</i></div>
</div></div>
<table class="parametryprikazu"><tbody><tr><td>'-M<i class="dopln">kód</i>'</td><td>Na začátek hlavního skriptu před čtením vloží příkaz „use <i class="dopln">kód</i>;“ Toho je možné využít k připojení modulů, importu identifikátorů z nich, nastavení direktiv apod. Lze použít opakovaně.</td></tr>

<tr><td>○ -0 ○ -0777 ◉ -0x0A ○ -0x017D</td><td>Nastavit $RS na: &quot;\x{0}&quot;/undef (celý soubor jako jeden záznam)/&quot;\n&quot;/&quot;Ž&quot; (uvádí se kód hexadecimálně).</td></tr>

<tr><td>☐ -C0</td><td>Vypne implicitní podporu Unicode. (Zatím jsem nezkoušel/a.)</td></tr>

<tr><td>○ -n ○ -p</td><td>Režim připomínající GNU awk. Parametry skriptu jsou interpretovány jako cesty k souborům, které mají být čteny. Celý program se pak obalí do implictní smyčky, která z těchto souborů načítá záznamy ukončené $RS do proměnné $ARG. (Na rozdíl od GNU awk ukončovač záznamu není odebrán, k tomu je potřeba použít „chomp($ARG);“.) Hodnota $ARG se na konci každého cyklu: zahodí/vypíše. Tyto volby se obvykle používají v kombinaci s volbou -e, u delšího skriptu je totiž výhodnější čtecí cyklus napsat ručně.</td></tr>

<tr><td>☐ -e <i class="dopln">'skript'</i></td><td>Uvede skript na příkazové řádce namísto jeho čtení ze souboru.</td></tr>

<tr><td>-I <i class="dopln">cesta</i></td><td>Vloží uvedenou cestu na začátek seznamu adresářů pro vyhledávání modulů (ekvivalent příkazu „use lib“ nebo parametru „'-Mlib(&quot;<i class="dopln">cesta</i>&quot;)'“). Lze použít opakovaně. Seznam se prohledává od začátku, takže nově vložená cesta bude mít přednost před všemi předchozími.</td></tr>

</tbody></table>
<p class="ponadpisu">
<i>Varování:</i> Nikdy do svých skriptů Perlu neuvádějte direktivu interpretu „#!“
(např. „#!/usr/bin/perl“)! Není snadné to udělat správně a neopatrné použití
této direktivy může způsobit, že skript nepůjde spustit vůbec nebo se místo
něj spustí něco úplně jiného.
</p>

<h2 id="cast11"><a href="#cast11"><span class="cislo">11.</span> Instalace na Ubuntu</a></h2>
<p class="ponadpisu">
Všechny použité nástroje jsou základními součástmi Ubuntu přítomnými i v minimální instalaci
(jen balíček Linuxu: Knihy kouzel si musíte nainstalovat, aby vám fungoval spouštěč „lkk“
a aby byl dostupný modul LinuxKnihaKouzel.pm).
</p>

<h2 id="cast12"><a href="#cast12"><span class="cislo">12.</span> Ukázka</a></h2>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1492272143"><span><a href="#z1492272143">⌫</a></span></span>Ukázka 1: Zpracování binárního souboru <span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">use Digest::MD5;</div>
<div class="radekzaklinadla">use constant konec_řádku =&gt; &quot;\n&quot;;</div>
<div class="radekzaklinadla">my $vstup = \*STDIN; # standardní vstup</div>
<div class="radekzaklinadla">binmode($vstup, &quot;:raw&quot;); # binární režim</div>
<div class="radekzaklinadla">$RS = &quot;\x{0}&quot;; $ORS = (konec_řádku); # speciální proměnné</div>
<div class="radekzaklinadla">my $s;</div>
<div class="radekzaklinadla">while (defined($s = scalar(readline($vstup)))) {</div>
<div class="radekzaklinadla" style="padding-left:2ch;">chomp($s); # zahodit ukončovač \0</div>
<div class="radekzaklinadla" style="padding-left:2ch;">print(Digest::MD5::md5_hex($s));</div>
<div class="radekzaklinadla">}</div>
</div></div>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z228511525"><span><a href="#z228511525">⪄</a></span></span>Ukázka 2: Zpracování textového souboru<span class="cislo">#2 </span></div><div class="radky">
<div class="radekzaklinadla">my $vstup = \*STDIN;</div>
<div class="radekzaklinadla">my @řádky = array(readline($vstup)); # všechny řádky najednou</div>
<div class="radekzaklinadla">chomp(@řádky);</div>
<div class="radekzaklinadla">printf(&quot;Na vstupu je %d řádků.\n&quot;, alength(@řádky));</div>
<div class="radekzaklinadla">my ($původní, $nový) = ('.**$x@y%z', '&amp;z$y.*@x');</div>
<div class="radekzaklinadla">for my $i (0..(alength(@řádky) - 1)) {</div>
<div class="radekzaklinadla" style="padding-left:2ch;">$řádky[$i] =~ s/\Q${původní}\E/($&amp;)=&gt; ${nový}/g;</div>
<div class="radekzaklinadla">}</div>
<div class="radekzaklinadla">print(&quot;&lt;&quot;, join(&quot;&gt;\n&lt;&quot;, @řádky), &quot;&gt;\n&quot;);</div>
</div></div>

<h2 id="cast13"><a href="#cast13"><span class="cislo">13.</span> Tipy a zkušenosti</a></h2>
<ul><li><i>Autovivifikace:</i> Operátory („-&gt;[]“ a „-&gt;{}“) lze bezpečně použít i v případech, kdy na jejich levé straně stojí neexistující prvek asociativního pole či pole nebo neinicializovaná proměnná. Perl totiž hodnotu na levé straně zkontroluje, a pokud je undef, automaticky tam přiřadí ukazatel na nové, prázdné pole (resp. asociativní pole). Tato funkce se nazývá <i>autovivifikace</i> a výrazně usnadňuje práci s vnořenými asociativními poli. Dejte si ale pozor na skutečnost, že k ní dojde při každé dereferenci, nejen při takové, do které pak přiřazujete! To znamená, že i příkaz „delete $p-&gt;{&quot;x&quot;}“ způsobí, že se do $p (pokud je undef) přiřadí ukazatel na prázdné asociativní pole.
</li><li><i>Předávání parametrů do funkcí:</i> Přiřaditelné skaláry se do funkcí předávají vždy odkazem; přiřazením do prvků zvláštního pole „@ARG“ lze přiřadit do skalárních proměnných, které byly předány funkci jako parametry. Pole se při předávání do funkce (pokud tomu nebrání její prototyp) rozloží na všechny svoje prvky v náležitém pořadí a ty se předají odkazem. Asociativní pole se rozloží na posloupnost dvojic „klíč,hodnota“, příčemž klíče se předají hodnotou (jsou nepřiřaditelné), zatímco hodnoty se předají odkazem. Perl neprovádí žádnou automatickou kontrolu počtu, typu či hodnoty předaných parametrů; ta je výhradně zodpovědností volané funkce. Je výhodné při ní použít funkci „typy()“ a regulární výraz.
</li><li><i>Vnořené datové struktury:</i> Vnořené datové struktury se v Perlu realizují téměř výhradně pomocí ukazatelů. Příklad: my @vnořená_pole = ([1, 2], [3, 4]);
</li><li><i>print() a printf():</i> Dokumentace Perlu radí upřednostňovat funkci „print“ před „printf“, protože je rychlejší a snáze se píše. To první je nejspíš pravda, ale pokud ji chcete použít korektně, musíte mít kontrolu nad hodnotami globálních proměnných $OFS a $ORS, protože funkce „print“ je vypisuje, a budou-li nastaveny na nečekané hodnoty z jiné části programu, bude výstup vaší funkce nekorektní. Napsat &quot;%s&quot; do printf je obvykle mnohem jednodušší než neustále přiřazovat $OFS a $ORS.
</li><li><i>Funkce map():</i> Návratovou hodnotou posledního příkazu v bloku funkce „map()“ nemusí být skalár; může to být i seznam či pole. V takovém případě se jeho obsah do výsledného pole zploští, díky čemuž nemusí funkce map() vrátit stejný počet prvků jako obržela; může jich být víc i méně.
</li><li><i>Blok kódu:</i> Blok kódu předávaný funkci jako zvláštní první parametr (což se týká především vestavěných funkcí grep(), map() a sort() <i>nesmí</i> obsahovat příkaz „return“, jinak tento příkaz ukončí obalující funkci a vrátí návratovou hodnotu z ní! To neplatí v případě, kdy se blok předává ukazatelem na anonymní funkci (s klíčovým slovem „sub“), tam je naopak příkaz „return“ vhodný.
</li><li><i>Správa paměti a slabé ukazatele:</i> Správa paměti v Perlu je založená na počítání odkazů. Jakýkoliv objekt bude zrušen (včetně případného volání destruktoru) v momentě, kdy počítadlo odkazů na něj klesne na nulu. Slabí ukazatelé se do počtu odkazů nepočítají, a pokud bude objekt zrušen v době jejich existence, automaticky přitom získají nehodnotu undef. Podle dokumentace je slabost ukazatele typová vlastnost objektu, která se nekopíruje (jakákoliv kopie slabého ukazatele je opět silný odkaz) a přepíše se přiřazením, pokud nejde o přiřazení slabého ukazatele téže hodnoty.
</li></ul>
<h3 id="cast13x1"><span><a href="#cast13x1" title="kapitola 9 (Perl: základy), sekce 13 (Tipy a zkušenosti), podsekce 1 (Regulární výraz a řetězec náhrady)"><sup>13/</sup>1 Regulární výraz a řetězec náhrady</a></span></h3>
<p class="ponadpisu">
Uvnitř regulárních výrazů v Perlu můžete použít interpolaci skalární proměnné, např. takto:
</p>
<div class="zaklinadlo"><div class="radky">
<div class="radekzaklinadla">if (&quot;abc&quot; =~ /a${proměnná}c/) {<i class="dopln">...</i>}</div>
</div></div>
<p>
Proměnná může obsahovat buď ukazatel na regulární výraz (ten se pak zakomponuje
do nového regulárního výrazu), nebo textový řetězec – ten se za běhu
interpretuje jako regulární výraz a také se zakomponuje.
</p><p>
Pokud proměnná obsahuje text a chcete ho vložit bez intepretace zvláštních znaků,
použijte tento zvláštní druh interpolace do regulárního výrazu:
</p>
<div class="zaklinadlo"><div class="radky">
<div class="radekzaklinadla">if (&quot;abc&quot; =~ /a\Q${proměnná}\Ec/) {<i class="dopln">...</i>}</div>
</div></div>
<p>
Uvnitř řetězců náhrady platí stejná pravidla odzvláštňování jako v řetězcových literálech
obklopených dvojitými uvozovkami, až na to, že „&quot;“ je obyčejný znak a „/“ je na místo toho
zvláštní. Uvnitř řetězce náhrady můžete použít speciální proměnné $&amp;
(nahradí se za text shody) a $1, $2, ..., $9, ${10}, ... (nahradí se za text odpovídajícího
záchytu). Také tam můžete použít interpolaci obyčejné proměnné, její text se použije doslova,
bez interpretace zvláštních znaků.
</p>

<h2 id="cast14"><a href="#cast14"><span class="cislo">14.</span> Další zdroje informací</a></h2>
<p class="ponadpisu">
Poznámka č. 1: Pro spuštění příkazu „perldoc“ si musíte doinstalovat balíček „perl-doc“:
</p>
<div class="zaklinadlo"><div class="radky">
<div class="radekzaklinadla">sudo apt-get install perl-doc</div>
</div></div>
<p>
Poznámka č. 2: Webové tutorialy a oficiální dokumentace obsahují značné množství dalších konstrukcí,
které v Linuxu: Knize kouzel nejsou zmíněny (např. operátor „&lt;&gt;“ nebo příkaz „given“).
U řady z nich má jejich vynechání dobrý důvod a jejich použití může vést k nezamýšlenému
chování programu, kterému budete moci porozumět jen po nastudování obrovského množství
dokumentace v angličtině. Pokud se tomu chcete vyhnout, používejte jen jazykové konstrukce
z kapitol Linuxu: Knihy kouzel.
</p>
<ul class="kompaktni"><li><a href="https://cs.wikipedia.org/wiki/Perl">Wikipedie: Perl</a>
</li><li>SATRAPA, Pavel. <i>Perl pro zelenáče.</i> 3. aktualizované a rozšířené vydání. Praha: CZ.NIC, z.s.p.o., 2018. CZ.NIC. ISBN 978-80-88168-35-5.
</li><li><a href="https://www.root.cz/serialy/perlicky/">Root.cz: seriál Perličky</a>
</li><li><a href="https://perldoc.perl.org/5.30.3/perl">Kompletní oficiální dokumentace</a> (anglicky — velmi dobrý zdroj)
</li><li>perldoc perlrun; perldoc perlvar; perldoc perlfunc; perldoc perlop (vše anglicky)
</li><li><a href="https://www.youtube.com/watch?v=WEghIXs8F6c">YouTube: Perl Tutorial</a> (anglicky)
</li><li><a href="https://www.youtube.com/playlist?list=PLWPirh4EWFpE0UEJPQ2PUeXUfvJDhPqSD">YouTube: Perl Online Training</a> (anglicky)
</li><li><a href="https://www.perl.org/">Oficiální stránka jazyka</a> (anglicky)
</li><li><a href="https://packages.ubuntu.com/focal/perl">Balíček</a> (anglicky)
</li><li><a href="https://www.perltutorial.org/">perltutorial.org</a> (anglicky)
</li><li><a href="https://www.guru99.com/perl-tutorials.html">Perl Tutorial for Beginners: Learn in 1 Day</a> (anglicky)
</li><li><a href="https://github.com/tldr-pages/tldr/blob/master/pages/common/perl.md">TL;DR: perl</a> (anglicky)
</li></ul>
<h2 id="cast15"><a href="#cast15"><span class="cislo">15.</span> Pomocné funkce a skripty</a></h2>
<div class="zaklinadlo"><div class="zahlavi"><span class="ikona D" id="z1025157199"><span><a href="#z1025157199">⡟</a></span></span>lkk perl – spouštěč, který spustí skript Perlu s doporučenými parametry<span class="cislo">#1 </span></div><div class="radky">
<div class="radekzaklinadla">#!/bin/bash</div>
<div class="radekzaklinadla">exec perl -CSDAL -I/usr/share/lkk/perl -Mv5.26.0 -Mstrict -Mwarnings -Mutf8 -MEnglish -MLinuxKnihaKouzel &quot;$@&quot;</div>
</div></div>
<div class="ppc"><div id="kapperlzakladyppc1"><a href="#kapperlzakladyppcr1" class="cislopozn">1</a>&nbsp;„Místní proměnná“ je viditelná v bloku, kde je deklarována. Inicializuje se při každém průchodu znovu a opuštěním bloku zaniká. Místní proměnná není nikdy viditelná z jiných zdrojových souborů.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc2"><a href="#kapperlzakladyppcr2" class="cislopozn">2</a>&nbsp;„Trvanlivá proměnná“ je stejně jako místní proměnná viditelná v bloku (popř. zdrojovém souboru), kde je deklarována. Inicializuje se však pouze při prvním průchodu a trvá až do ukončení programu.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc3"><a href="#kapperlzakladyppcr3" class="cislopozn">3</a>&nbsp;„Globální proměnná“ je viditelná v celém programu (ve všech zdrojových souborech, a to i v případě, že je deklarovaná uvnitř definice funkce), inicializuje se při prvním průchodu a trvá až do ukončení programu.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc4"><a href="#kapperlzakladyppcr4" class="cislopozn">4</a>&nbsp;Poznámka: kvůli omezením Perlu je každá konstanta globální v rámci jmenného prostoru a viditelná i z ostatních zdrojových souborů. V její inicializaci může být obecný výraz, ale bude vyhodnocován v době překladu, takže je omezeno, co může obsahovat. Může však obsahovat již dříve definované konstanty.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc5"><a href="#kapperlzakladyppcr5" class="cislopozn">5</a>&nbsp;Příkaz „local“ způsobí, že v paměti vznikne nový objekt příslušného typu a uvedená globální proměnná se na něj dočasně „přesměruje“, takže veškeré odkazy na danou globální proměnnou (i uvnitř volaných knihovních funkcí) budou přistupovat k novému objektu místo k tomu původnímu. Do původního stavu se proměnná vrátí po opuštění bloku kódu, v němž byla deklarací „local“ překryta.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc6"><a href="#kapperlzakladyppcr6" class="cislopozn">6</a>&nbsp;Závorky kolem identifikátoru konstanty můžete vynechat tehdy, když je obalený jinými kulatými závorkami; nesmíte je vynechat v případě, že je obalený složenými či hranatými závorkami!</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc7"><a href="#kapperlzakladyppcr7" class="cislopozn">7</a>&nbsp;Vracené typy jsou: u = undef, s = číslo či řetězec, S = ukazatel na skalár, A = ukazatel na pole, H = ukazatel na asociativní pole, C = ukazatel na funkci („kód“), R = ukazatel na regulární výraz, F = ukazatel na vstupně/výstupní proud a &quot;&lt;Název::Třídy&gt;&quot; pro ukazatele na objekty tříd (dosadí se název třídy).</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc8"><a href="#kapperlzakladyppcr8" class="cislopozn">8</a>&nbsp;Operátor „//“ se vyhodnocuje postupně. To znamená, že pokud výraz na jeho levé straně není undef, výraz na pravé straně se již nevyhodnotí. To umožňuje ho využít v kombinaci např. s funkcí „die()“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc9"><a href="#kapperlzakladyppcr9" class="cislopozn">9</a>&nbsp;Poznámka: při volání uživatelské funkce se závorky interpretují jako seznam, proto v něm dochází ke zplošťování. Tomu lze zabránit pomocí tzv. prototypů, proto k němu u vestavěných a některých knihovních funkcí nedochází. To vám umožňuje např. funkci „push“ předat přímo pole, aniž by se zploštilo.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc10"><a href="#kapperlzakladyppcr10" class="cislopozn">10</a>&nbsp;Pozor! Předávaný blok příkazů se chová jako samostatná funkce (dostává parametry v poli @ARG a vrací hodnotu), až na příkaz „return“. Ten v tomto bloku NIKDY nepoužívejte! Návratovou hodnotou bloku bude hodnota posledního provedeného příkazu. Pokud blok obsahuje jen jeden krátký příkaz, můžete volání zapsat na jednu řádku.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc11"><a href="#kapperlzakladyppcr11" class="cislopozn">11</a>&nbsp;Tento příkaz předá řízení přímo na začátek uvedené funkce, jako by byla volána místo funkce právě prováděné. Všechny lokální proměnné jsou před voláním zrušeny a pole @ARG bude předáno tak, jak právě je (včetně případných změn, které v něm stávající funkce provedla).</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc12"><a href="#kapperlzakladyppcr12" class="cislopozn">12</a>&nbsp;Funkce nemusí být definovaná před prvním použitím, ale pokud má prototyp, ten musí být před prvním použitím znám.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc13"><a href="#kapperlzakladyppcr13" class="cislopozn">13</a>&nbsp;Funkce definovaná s modifikátorem „lvalue“ musí vrátit přiřaditelný skalár (proměnnou, prvek pole či hodnotu v asociativním poli). Nemůže vracet pole, undef apod.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc14"><a href="#kapperlzakladyppcr14" class="cislopozn">14</a>&nbsp;Na rozdíl od normálních polí, prvky tohoto speciálního pole se do funkce předávají odkazem. To znamená, že přímým přiřazením do prvků tohoto pole můžete změnit proměnné (popř. prvky pole či hodnoty asociativního pole), které byly při volání funkce zadány. Pokud bylo daným parametrem funkce něco nepřiřaditelného, takové přiřazení se bude tiše ignorovat.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc15"><a href="#kapperlzakladyppcr15" class="cislopozn">15</a>&nbsp;Předaný blok zavoláte jako funkci příkazem „$id-&gt;(parametry)“, kde id je zvolený identifikátor proměnné. Parametry (volitelné) předané volání bloku jsou v definici předaného bloku přístupné v poli @ARG.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc16"><a href="#kapperlzakladyppcr16" class="cislopozn">16</a>&nbsp;Pozor, před znakem „=“ na uvedených speciálních řádcích nesmí být žádný jiný znak, ani odsazení! Víceřádkové komentáře nelze zanořovat.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc17"><a href="#kapperlzakladyppcr17" class="cislopozn">17</a>&nbsp;Část „&gt;&gt; 8“ je nutná v případě, kdy vás zajímá návratový kód procesu. Ten je totiž v návratové hodnotě funkce vynásoben hodnotou 256 (tedy bitově posunut o 8 bitů doleva). Poznámka: funkce „system()“ vám neumožňuje zapisovat na vstup procesu nebo číst z jeho výstupu. K těmto účelům použijte roury popsané v sekci „Zaklínadla: Vstup/výstup“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc18"><a href="#kapperlzakladyppcr18" class="cislopozn">18</a>&nbsp;Ohledně nastavení oddělovače — viz poznámku pod čarou týkající se speciální proměnné $RS.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc19"><a href="#kapperlzakladyppcr19" class="cislopozn">19</a>&nbsp;Funkce „div“ (z balíčku LinuxKnihaKouzel.pl) provede celočíselné dělení absolutních hodnot zadaných čísel a vrací dvojici (výsledek, zbytek); výsledek z ní získáte přečtením prvku s indexem 0.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc20"><a href="#kapperlzakladyppcr20" class="cislopozn">20</a>&nbsp;Výchozí hodnota obou proměnných je nehodnota undef, která zde má stejný význam jako prázdný řetězec.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc21"><a href="#kapperlzakladyppcr21" class="cislopozn">21</a>&nbsp;Jako ukončovač lze nastavit libovolný řetězec. Existují dva zvláštní případy: nastavení na prázdný řetězec způsobí, že jako ukončovač bude rozpoznána jakákoliv posloupnost dvou nebo více znaků \n; nehodnota undef způsobí, že vstup nebude dělený na záznamy a rovnou se načte celý zbytek vstupního souboru.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc22"><a href="#kapperlzakladyppcr22" class="cislopozn">22</a>&nbsp;Na rozdíl od Bashe toto pole neobsahuje nultý parametr (název skriptu). Jsou to opravdu jen parametry předané skriptu na příkazové řádce.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc23"><a href="#kapperlzakladyppcr23" class="cislopozn">23</a>&nbsp;Přiřazením je možno proměnné prostředí vytvářet a měnit.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc24"><a href="#kapperlzakladyppcr24" class="cislopozn">24</a>&nbsp;Podle dokumentace se hodnota této proměnné nastavuje při uzavření roury funkcí „close()“, při úspěšném ukončení funkcí „wait()“ a „waitpid()“ a při ukončení funkcí „readpipe()“ a „system()“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc25"><a href="#kapperlzakladyppcr25" class="cislopozn">25</a>&nbsp;Tato proměnná je určena především pro ladění; raději se příliš nespoléhejte na konkrétní tvar, který vám vrátí.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc26"><a href="#kapperlzakladyppcr26" class="cislopozn">26</a>&nbsp;Příkaz „return“ v Perlu není povinný. Při jeho nepoužití vrátí Perl hodnotu posledního provedeného příkazu ve funkci.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc27"><a href="#kapperlzakladyppcr27" class="cislopozn">27</a>&nbsp;Poznámka: jeden příkaz může být označen více návěštími.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc28"><a href="#kapperlzakladyppcr28" class="cislopozn">28</a>&nbsp;Počáteční index může být i záporný; v takovém případě se k němu před použitím přičte délka řetězce. Výsledný interval daný počátečním indexem a maximální délkou se musí s pozicemi existujícími v řetězci alespoň dotýkat, pokud bude zcela mimo řetězec, funkce vypíše varování a vrátí undef. Maximální délka se vždy počítá od zadané pozice, ne od skutečného začátku řetězce, proto např. „substr(&quot;AB&quot;, -3, 2)“ vrátí pouze &quot;A&quot;.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc29"><a href="#kapperlzakladyppcr29" class="cislopozn">29</a>&nbsp;Odebere z konce řetězce v proměnné ukončovač podle nastavení speciální proměnné $RS. Velmi často se používá po načtení řádky. Pokud řetězec ukončovačem nekončí, proměnná zůstane nezměněná.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc30"><a href="#kapperlzakladyppcr30" class="cislopozn">30</a>&nbsp;Oddělovač může být buď skalár (např. řetězec), nebo literál regulárního výrazu v lomítkách. Pozor na pasti! Past č. 1: Řetězec &quot;<span class="viditelnamezera">&nbsp;</span>&quot; se zde interpretuje jako regulární výraz „\s+“. Pokud chcete jako oddělovač uvést mezeru, použijte místo řetězce regulární výraz „<span class="viditelnamezera">&nbsp;</span>“ zadaný jako „/<span class="viditelnamezera">&nbsp;</span>/“. Past č. 2: pokud regulární výraz obsahuje záchyty, příkaz „split“ pro každý záchyt vloží na dané místo výstupního pole navíc řetězec s textem záchytu; pokud daný záchyt nebyl použit, vloží se tam undef. Podrobnější vysvětlení v dokumentaci funkce „split“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc31"><a href="#kapperlzakladyppcr31" class="cislopozn">31</a>&nbsp;Pro prázdný řetězec vrací funkce chop() prázdný řetězec a proměnnou nezmění. Podle dokumentace funkce „chop()“ nevyžaduje okopírování celého řetězce, takže může být použita v cyklu pro zpracování řetězce znak po znaku.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc32"><a href="#kapperlzakladyppcr32" class="cislopozn">32</a>&nbsp;Ve dvojitých uvozovkách jsou zvláštními znaky „\“, „$“, „@“ a „&quot;“, všechny lze odzvláštnit zpětným lomítkem. Navíc se tam intepretují některé sekvence začínající zpětným lomítkem a písmenem (např. „\n“). V apostrofech je zvláštním znakem pouze apostrof a odzvláštnění není možné. Konec řádky může být obsažen v obou druzích literálů bez odzvláštnění.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc33"><a href="#kapperlzakladyppcr33" class="cislopozn">33</a>&nbsp;Můžete sice použít i „\0“, ale ne, pokud by za ním měla následovat číslice. „\01“ totiž vygeneruje bajt s hodnotou 1, ne nulový bajt a číslici 1.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc34"><a href="#kapperlzakladyppcr34" class="cislopozn">34</a>&nbsp;Pozor, výchozí oddělovač je mezera. Chcete-li interpolovat prvky pole bez oddělení, musíte do proměnné $LIST_SEPARATOR nastavit prázdný řetězec.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc35"><a href="#kapperlzakladyppcr35" class="cislopozn">35</a>&nbsp;Nebyl-li podřetězec nalezen, funkce vrací -1. Limit u funkce „rindex()“ znamená, že budou ignorovány výskyty podřetězce, které začínají na vyšším indexu, než je uvedený limit.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc36"><a href="#kapperlzakladyppcr36" class="cislopozn">36</a>&nbsp;Pokud další shoda nebyla nalezena, funkce vrací undef, resp. next_match() vrací (undef, undef).</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc37"><a href="#kapperlzakladyppcr37" class="cislopozn">37</a>&nbsp;Nebyla-li další shoda nalezena, vráceno bude prázdné pole. V ostatních případech je záchytem [0] shoda jako celek a počínaje indexem [1] jednotlivé záchyty ze závorek. Všechny záchyty se vracejí ve formě ukazatele na dvouprvkové pole (index začátku, délka záchytu).</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc38"><a href="#kapperlzakladyppcr38" class="cislopozn">38</a>&nbsp;Shody se vracejí ve formě ukazatele na dvouprvkové pole (index začátku, délka shody).</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc39"><a href="#kapperlzakladyppcr39" class="cislopozn">39</a>&nbsp;Poznámka: tuto funkci obvykle nepotřebujete, protože do regulárního výrazu můžete interpolovat řetězec bez interpretace pomocí dvojice „\Q“ a „\E“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc40"><a href="#kapperlzakladyppcr40" class="cislopozn">40</a>&nbsp;Podrobnější informace o syntaxi najdete v sekci „Regulární výraz a řetězec náhrady“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc41"><a href="#kapperlzakladyppcr41" class="cislopozn">41</a>&nbsp;Pro nahrazení jen prvního výskytu vypusťte „g“ na konci druhého řádku zaklínadla.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc42"><a href="#kapperlzakladyppcr42" class="cislopozn">42</a>&nbsp;Poznámka: výsledek překladu přepíše původní proměnnou, ale není návratovou hodnotou výrazu!</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc43"><a href="#kapperlzakladyppcr43" class="cislopozn">43</a>&nbsp;Prvky seznamu mohou být skaláry (každý utvoří jeden prvek seznamu) nebo pole a vnořené seznamy (každé pole a vnořený seznam se za běhu rozloží na všechny svoje prvky v náležitém pořadí). Tip: skalárem v seznamu může být i nehodnota undef.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc44"><a href="#kapperlzakladyppcr44" class="cislopozn">44</a>&nbsp;Slovo je v tomto případě každá neprázdná posloupnost nebílých znaků oddělená od ostatních slov alespoň jedním bílým znakem. Uvnitř operátoru qw není možné odzvláštnění a zvláštní význam má pouze odpovídající uzavírací závorka a bílé znaky. Forma se složenými závorkami je vhodnější při víceřádkovém použití.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc45"><a href="#kapperlzakladyppcr45" class="cislopozn">45</a>&nbsp;Pokud přistupujete k prvku pole vráceného z volání funkce, musíte celé volání obalit ještě do další úrovně kulatých závorek, např. „(f(1, 2))[5]“. U „f(1, 2)[5]“ Perl ohlásí syntaktickou chybu.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc46"><a href="#kapperlzakladyppcr46" class="cislopozn">46</a>&nbsp;Přebytečné prvky pole se zahazují. Přebytečné proměnné se vyplní nehodnotou undef.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc47"><a href="#kapperlzakladyppcr47" class="cislopozn">47</a>&nbsp;Funkce typy() s více parametry vrací řetězec, který je konkatenací návratových hodnot pro jednotlivé prvky. Význam jednotlivých částí řetězce je popsán v poznámce pod čarou k příkazu pro zjištění typu skaláru.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc48"><a href="#kapperlzakladyppcr48" class="cislopozn">48</a>&nbsp;Funkce shift() a pop() vracejí vyjmutý prvek.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc49"><a href="#kapperlzakladyppcr49" class="cislopozn">49</a>&nbsp;Poznámka: vkládání na určitý index může být pomalé.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc50"><a href="#kapperlzakladyppcr50" class="cislopozn">50</a>&nbsp;Výsledkem je seznam prvků, pro které se poslední příkaz v bloku vyhodnotí jako logická pravda.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc51"><a href="#kapperlzakladyppcr51" class="cislopozn">51</a>&nbsp;Pokud je seznam kratší než N prvků, funkce ho vrátí nezměněný.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc52"><a href="#kapperlzakladyppcr52" class="cislopozn">52</a>&nbsp;Operátor „map“ funguje přesně jako cyklus „foreach (@pole)“ (tzn. v uvedeném bloku je $ARG odkaz na právě zpracovávaný prvek pole), až na to, že jeho návratovou hodnotou je seznam hodnot posledního provedeného příkazu bloku v každém cyklu. Protože je $ARG odkaz, můžete ho využít k modifikaci prvků původního pole.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc53"><a href="#kapperlzakladyppcr53" class="cislopozn">53</a>&nbsp;Tip: místo uložení do pole můžete získanou N-tici rovnou rozložit do proměnných, nebo můžete místo funkce splice() použít opakované volání funkce shift(). Poslední N-tice může být neúplná. Pokud chcete přebytečné prvky zahodit, nahraďte podmínku „!= 0“ za „&gt;= N“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc54"><a href="#kapperlzakladyppcr54" class="cislopozn">54</a>&nbsp;Má-li vstup lichý počet prvků, funkce vypíše varování a k utvoření poslední dvojice doplní „undef“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc55"><a href="#kapperlzakladyppcr55" class="cislopozn">55</a>&nbsp;Poznámka: většina lokalizací nerozlišuje velikost písmen a toto rozlišování u nich nelze zapnout; v češtině např. neexistují pravidla pro odlišné řazení „ch“, „CH“, „cH“ a „Ch“.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc56"><a href="#kapperlzakladyppcr56" class="cislopozn">56</a>&nbsp;Pokud si nejste stoprocentně jistý/á, že všechny prvky seznamu (resp. pole) jsou čísla (nebo řetězce vypadající přesně jako čísla), uvažte možnost předběžného přefiltrování seznamu funkcí „grep“ nebo konverzi na čísla funkcí „map“. Porovnávací operátor &lt;=&gt; se může chovat podivně, když se setká s ne-číslem; může vypsat chybové hlášení nebo prvek poslat na konec pole; pravděpodobně však nezpůsobí pád programu.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc57"><a href="#kapperlzakladyppcr57" class="cislopozn">57</a>&nbsp;Řadicí blok dostane odkazy na porovnávané skaláry ve speciálních proměnných $a a $b a musí vrátit číslo větší než 0, pokud $a &gt; $b; číslo menší než 0, pokud $a &lt; $b a nulu jinak.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc58"><a href="#kapperlzakladyppcr58" class="cislopozn">58</a>&nbsp;Úroveň řazení 2 nerozlišuje velikost písmen; úroveň řazení 3 rozlišuje velikost písmen, ale ne znaky se stejnou řadicí váhou; úroveň řazení 4 rozliší i znaky se stejnou řadicí váhou. Tip 1: pro řazení sestupně prohoďte parametry $a a $b. Tip 2: pro proměnnou $porovnávač můžete zvolit jiný identifikátor.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc59"><a href="#kapperlzakladyppcr59" class="cislopozn">59</a>&nbsp;Podmínka je jeden nebo více příkazů, kde výsledek posledního příkazu je otestován na logickou hodnotu. Testovaný prvek (resp. index) se předává pomocí speciální proměnné $ARG. Pokud prvek nebude nalezen, funkce vrátí undef.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc60"><a href="#kapperlzakladyppcr60" class="cislopozn">60</a>&nbsp;Podle dokumentace je pořadí prvků v polích vrácených těmito funkcemi stejné, dokud se dané asociativní pole nezmění. Naopak každá jako změna pravděpodobně změní pořadí prvků vracené oběma funkcemi.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc61"><a href="#kapperlzakladyppcr61" class="cislopozn">61</a>&nbsp;Pokud prvek neexistuje, čtení vrací undef a přiřazení prvek vytvoří.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc62"><a href="#kapperlzakladyppcr62" class="cislopozn">62</a>&nbsp;Pokus o smazání neexistujícího prvku je tiše ignorován.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc63"><a href="#kapperlzakladyppcr63" class="cislopozn">63</a>&nbsp;Pro interpretaci návratové hodnoty funkce typy() vyhledejte poznámku pod čarou k zaklínadlu „zjistit typ skaláru“ v této kapitole. Pro interpretaci návratové hodnoty funkce ref() hledejte v dokumentaci Perlu.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc64"><a href="#kapperlzakladyppcr64" class="cislopozn">64</a>&nbsp;Analogicky můžete ukazatel na anonymní funkci předat jako parametr jiné funkci. Poznámka: raději se nesnažte získávat ukazatele na vestavěné funkce Perlu; pravděpodobně to nebude fungovat.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc65"><a href="#kapperlzakladyppcr65" class="cislopozn">65</a>&nbsp;Poznámka: klíče v asociativním poli jsou nepřiřaditelné, proto ukazatel na ně nelze získat.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc66"><a href="#kapperlzakladyppcr66" class="cislopozn">66</a>&nbsp;Uvnitř složených závorek zde nemusí být jen proměnná, ale může to být jakýkoliv výraz, který vrátí příslušný ukazatel (např. volání funkce).</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc67"><a href="#kapperlzakladyppcr67" class="cislopozn">67</a>&nbsp;Režim je jeden z: „&lt;“: otevřít existující soubor pro čtení; „&gt;“: vytvořit nový/přepsat existující soubor a otevřít pro zápis; „&gt;&gt;“: otevřít pro zápis na konec souboru.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc68"><a href="#kapperlzakladyppcr68" class="cislopozn">68</a>&nbsp;Režim je jeden z: „&lt;“: otevřít existující soubor pro čtení; „+&lt;“: otevřít existující soubor pro čtení i zápis; „&gt;“: vytvořit nový/přepsat existující soubor a otevřít jen pro zápis; „+&gt;“: totéž, ale pro zápis i čtení; „&gt;&gt;“: otevřít soubor pro zápis na konec.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc69"><a href="#kapperlzakladyppcr69" class="cislopozn">69</a>&nbsp;Deskriptory jsou číslované proudy, které typicky otevírá bash před spuštěním každého procesu. Deskriptory číslo 0, 1 a 2 se nazývají „standardní vstup“, „standardní výstup“ a „standardní chybový výstup. Režim je v tomto případě buď „&lt;“ pro čtení z deskriptoru, nebo „&gt;“ pro zápis do deskriptoru.“</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc70"><a href="#kapperlzakladyppcr70" class="cislopozn">70</a>&nbsp;Tento příkaz nesmí být použit poté, co už bylo s proudem od otevření manipulováno (např. čtením, zápisem, přesouváním apod.) Proto ho doporučuji používat jen okamžitě po otevření proudu.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc71"><a href="#kapperlzakladyppcr71" class="cislopozn">71</a>&nbsp;Perl doplní chybové hlášení o označení zdrojového kódu a číslo řádku.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc72"><a href="#kapperlzakladyppcr72" class="cislopozn">72</a>&nbsp;Při čtení za koncem souboru se do proměnné $cíl uloží nehodnota undef.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc73"><a href="#kapperlzakladyppcr73" class="cislopozn">73</a>&nbsp;Podle manuálu tyto funkce nejsou příliš efektivní; je vhodnější raději načítat po řádcích s ukončovačem a každou řádku rozdělit po znacích. Při čtení za koncem souboru funkce vracejí undef.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc74"><a href="#kapperlzakladyppcr74" class="cislopozn">74</a>&nbsp;Pozor! Mód je zde interpretován v oktalové soustavě, proto ho tak zpravidla musíte zadat. Pokud ho zadáte v desítkové soustavě (např. „777“), nebude fungovat.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc75"><a href="#kapperlzakladyppcr75" class="cislopozn">75</a>&nbsp;Pozor, získané pole bude obsahovat i zvláštní položky „.“ a „..“ a všechny skryté soubory a adresáře. Možná budete vrácené pole chtít přefiltrovat funkcí grep() a seřadit.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc76"><a href="#kapperlzakladyppcr76" class="cislopozn">76</a>&nbsp;Typ je: 1 pro pojmenovanou rouru; 2 pro znakové zařízení; 4 pro adresář; 6 pro blokové zařízení; 8 pro soubor; 10 pro symbolický odkaz (jen u funkce „lstat“!) a 12 pro soket.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc77"><a href="#kapperlzakladyppcr77" class="cislopozn">77</a>&nbsp;Čas se vrací jako celočíselná časová známka Unixu.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
<div id="kapperlzakladyppc78"><a href="#kapperlzakladyppcr78" class="cislopozn">78</a>&nbsp;Mód se vrací jako číslo. Pravděpodobně ho budete chtít vypsat v čitelné podobě funkcí „printf()“ s formátem &quot;%04o&quot;.</div>
<script>document.write("<div class=\"zpetdotextu\" onclick=\"window.history.back()\">zpět do textu</div>");</script>
</div>


<nav class="spodni">
<a href="index.htm" class="naindex">🗐&nbsp;Přehled&nbsp;kapitol</a>
<div class="naslkap">
<a href="prace-s-archivy.htm" rel="next" title="9. Práce s archivy">Následující&nbsp;kapitola/dodatek:<br><span class="cislo">9</span>
<span class="nazev">Práce s archivy</span></a>
</div>
<!--<div><a href="index.htm">🗐&nbsp;Přehled&nbsp;kapitol</a></div>-->
</nav>


<div class="odkazydole"><div><a href="prace-s-archivy.htm"><img src="obrazky/ik/prace-s-archivy.png" alt="" width="32" height="32">Práce s archivy</a><a href="zpracovani-textovych-souboru.htm"><img src="obrazky/ik/zpracovani-textovych-souboru.png" alt="" width="32" height="32">Zpracování textových souborů</a><a href="sprava-uzivatelskych-uctu.htm"><img src="obrazky/ik/sprava-uzivatelskych-uctu.png" alt="" width="32" height="32">Správa uživatelských účtů</a></div></div>
<div class="reklamnipata">Líbí se vám tento projekt a chcete, aby byl ještě lepší? Můžete mi s tím pomoci. Zmiňte se o něm technicky zdatným přátelům, opravte překlepy a nahlašte nefunkční zaklínadla, aby mohla být opravena; poskytněte mi zpětnou vazbu nebo se zapojte do vývoje nových kapitol. Další informace na GitHubu v dokumentu <a href="https://github.com/singularis-mzf/linux-spellbook/blob/v%C3%BDvojov%C3%A1/JAK-SE-ZAPOJIT.md">Jak se zapojit</a>.</div>

</article>
<!-- *** -->
<footer id="dole">
<img src="obrazky/by-sa.png" width="88" height="31" alt="[BY-SA]">
<p>Veškerý obsah této stránky (text, obrázky, zdrojový kód) je možno upravovat a šířit pod podmínkami licence
<a href="https://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International</a>.
Upozorňuji, že uvedená licence vyžaduje uvedení seznamu autorů, licence a zdroje a poskytnutí stejné
či kompatibilní licence k provedeným změnám, jsou-li nějaké. Příslušné údaje jsou dostupné
na stránce „<a href="x-autori.htm">Přehled autorů</a>“.
Šíření obsahu bez těchto údajů nebo šíření upravené verze bez poskytnutí adekvátní
licence k provedeným úpravám je pravděpodobně porušení licenčních podmínek a může být postihováno.
Poskytování zdrojového kódu při šíření není touto licencí vyžadováno.</p><p>Pro nové verze, další informace, aktuální zdrojový kód
a možnost se zapojit do projektu „Linux: Kniha kouzel“ navštivte jeho
<a href="https://github.com/singularis-mzf/linux-spellbook">repozitář na GitHubu</a>.
</footer>
</div>

<nav class="menu">
<!-- MENU OSNOVA -->
<a href="#menuosnova" id="menuosnova"><span class="prvnipismeno">O</span>snova</a>
<aside class="menuosnova">
<div><div class="nadpis">Osnova</div><div class="polozky">
<a href="#cast1" class="sekce">1 Úvod</a>
<a href="#cast2" class="sekce">2 Definice</a>
<a href="#cast3" class="sekce">3 Zaklínadla: Základní</a>
<a href="#cast3x1" class="podsekce">/1 Proměnné a konstanty</a>
<a href="#cast3x2" class="podsekce">/2 Skaláry a undef</a>
<a href="#cast3x3" class="podsekce">/3 Volání funkcí</a>
<a href="#cast3x4" class="podsekce">/4 Definice funkcí</a>
<a href="#cast3x5" class="podsekce">/5 Komentáře</a>
<a href="#cast3x6" class="podsekce">/6 Volání příkazů /bin/sh</a>
<a href="#cast3x7" class="podsekce">/7 Operace s čísly</a>
<a href="#cast3x8" class="podsekce">/8 Speciální proměnné</a>
<a href="#cast4" class="sekce">4 Zaklínadla: Řízení toku</a>
<a href="#cast4x1" class="podsekce">/1 Podmínky</a>
<a href="#cast4x2" class="podsekce">/2 Cykly</a>
<a href="#cast4x3" class="podsekce">/3 Skoky</a>
<a href="#cast4x4" class="podsekce">/4 Přepínač typu switch</a>
<a href="#cast5" class="sekce">5 Zaklínadla: Řetězce a regulární výrazy</a>
<a href="#cast5x1" class="podsekce">/1 Základní operace</a>
<a href="#cast5x2" class="podsekce">/2 Dělení na podřetězce</a>
<a href="#cast5x3" class="podsekce">/3 Literály řetězců</a>
<a href="#cast5x4" class="podsekce">/4 Literály regulárních výrazů</a>
<a href="#cast5x5" class="podsekce">/5 Najít (regulární výrazy a podřetězce)</a>
<a href="#cast5x6" class="podsekce">/6 Najít a nahradit v řetězcové proměnné</a>
<a href="#cast5x7" class="podsekce">/7 Konverze čísel na řetězce a naopak</a>
<a href="#cast5x8" class="podsekce">/8 Heše</a>
<a href="#cast6" class="sekce">6 Zaklínadla: Pole</a>
<a href="#cast6x1" class="podsekce">/1 Literály (vytvořit pole z prvků)</a>
<a href="#cast6x2" class="podsekce">/2 Základní operace</a>
<a href="#cast6x3" class="podsekce">/3 Vkládání/vyjímání prvků</a>
<a href="#cast6x4" class="podsekce">/4 Filtrování</a>
<a href="#cast6x5" class="podsekce">/5 Transformace a zpracování pole</a>
<a href="#cast6x6" class="podsekce">/6 Řazení a přeskládání prvků v poli</a>
<a href="#cast6x7" class="podsekce">/7 Vyhledávání a testování</a>
<a href="#cast7" class="sekce">7 Zaklínadla: Asociativní pole</a>
<a href="#cast7x1" class="podsekce">/1 Jako celek</a>
<a href="#cast7x2" class="podsekce">/2 Prvky</a>
<a href="#cast8" class="sekce">8 Zaklínadla: Ukazatelé</a>
<a href="#cast8x1" class="podsekce">/1 Ukazatelé obecně</a>
<a href="#cast8x2" class="podsekce">/2 Získat ukazatel</a>
<a href="#cast8x3" class="podsekce">/3 Dereferencovat ukazatel</a>
<a href="#cast8x4" class="podsekce">/4 Slabé ukazatele</a>
<a href="#cast9" class="sekce">9 Zaklínadla: Vstup/výstup</a>
<a href="#cast9x1" class="podsekce">/1 Otevřít/zavřít</a>
<a href="#cast9x2" class="podsekce">/2 Standardní výstup a chybová hlášení</a>
<a href="#cast9x3" class="podsekce">/3 Čtení (vstup) v textovém režimu</a>
<a href="#cast9x4" class="podsekce">/4 Zápis (výstup) v textovém režimu</a>
<a href="#cast9x5" class="podsekce">/5 Čtení (vstup) v binárním režimu</a>
<a href="#cast9x6" class="podsekce">/6 Zápis a ostatní operace v binárním režimu</a>
<a href="#cast9x7" class="podsekce">/7 Operace se soubory a pevnými a symbolickými odkazy</a>
<a href="#cast9x8" class="podsekce">/8 Operace s adresáři</a>
<a href="#cast9x9" class="podsekce">/9 Zjistit informace o adresářové položce</a>
<a href="#cast10" class="sekce">10 Parametry příkazů</a>
<a href="#cast11" class="sekce">11 Instalace na Ubuntu</a>
<a href="#cast12" class="sekce">12 Ukázka</a>
<a href="#cast13" class="sekce">13 Tipy a zkušenosti</a>
<a href="#cast13x1" class="podsekce">/1 Regulární výraz a řetězec náhrady</a>
<a href="#cast14" class="sekce">14 Další zdroje informací</a>
<a href="#cast15" class="sekce">15 Pomocné funkce a skripty</a>
</div></div>
<a href="#zavritmenu" class="zavritmenu">Zavřít&nbsp;menu</a>
</aside>
<!-- MENU KAPITOLY -->
<a href="#menukapitoly" id="menukapitoly"><span class="prvnipismeno">K</span>apitoly</a>
<aside class="menukapitoly">
<div><div class="nadpis">Kapitoly</div><div class="polozky">
<a href="predmluva.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/predmluva.png" alt="[]"></span><span class="cislo">1</span><span class="nazev">Předmluva</span></a>
<a href="zakladni-znalosti.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/zakladni-znalosti.png" alt="[]"></span><span class="cislo">2</span><span class="nazev">Základní znalosti</span></a>
<a href="diskove-oddily.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/diskove-oddily.png" alt="[]"></span><span class="cislo">3</span><span class="nazev">Diskové oddíly</span></a>
<a href="git.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/git.png" alt="[]"></span><span class="cislo">4</span><span class="nazev">Git</span></a>
<a href="hledani-souboru.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/hledani-souboru.png" alt="[]"></span><span class="cislo">5</span><span class="nazev">Hledání souborů</span></a>
<a href="nabidka-aplikaci.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/nabidka-aplikaci.png" alt="[]"></span><span class="cislo">6</span><span class="nazev">Nabídka aplikací</span></a>
<a href="odkazy.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/odkazy.png" alt="[]"></span><span class="cislo">7</span><span class="nazev">Pevné a symbolické odkazy</span></a>
<a href="perl-zaklady.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/perl-zaklady.png" alt="[]"></span><span class="cislo">8</span><span class="nazev">Perl: základy</span></a>
<a href="prace-s-archivy.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/prace-s-archivy.png" alt="[]"></span><span class="cislo">9</span><span class="nazev">Práce s archivy</span></a>
<a href="regularni-vyrazy.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/regularni-vyrazy.png" alt="[]"></span><span class="cislo">10</span><span class="nazev">Regulární výrazy</span></a>
<a href="sprava-balicku.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/sprava-balicku.png" alt="[]"></span><span class="cislo">11</span><span class="nazev">Správa balíčků</span></a>
<a href="sprava-uzivatelskych-uctu.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/sprava-uzivatelskych-uctu.png" alt="[]"></span><span class="cislo">12</span><span class="nazev">Správa uživatelských účtů</span></a>
<a href="system.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/system.png" alt="[]"></span><span class="cislo">13</span><span class="nazev">Systém</span></a>
<a href="zpracovani-textovych-souboru.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/zpracovani-textovych-souboru.png" alt="[]"></span><span class="cislo">14</span><span class="nazev">Zpracování textových souborů</span></a>
<a href="zpracovani-videa-a-zvuku.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/zpracovani-videa-a-zvuku.png" alt="[]"></span><span class="cislo">15</span><span class="nazev">Zpracování videa a zvuku</span></a>
<a href="koncepce-projektu.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/koncepce-projektu.png" alt="[]"></span><span class="cislo">16</span><span class="nazev">Koncepce projektu Linux: Kniha kouzel</span></a>
<a href="plan-vyvoje.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/plan-vyvoje.png" alt="[]"></span><span class="cislo">17</span><span class="nazev">Plán budoucího vývoje</span></a>
<a href="licence.htm" class="kapitola"><span class="ikona"><img src="obrazky/ik/licence.png" alt="[]"></span><span class="cislo">18</span><span class="nazev">Licence</span></a>
<div class="premiove"><strong>Prémiové kapitoly:</strong>
<div>AWK</div>
<div>Datum, čas a kalendář</div>
<div>Make</div>
<div>Manuálové stránky</div>
<div>Markdown</div>
<div>Perl: moduly a objekty</div>
<div>Proměnné prostředí a interpretu</div>
<div>Sed</div>
<div>Soubory a adresáře</div>
<div>Správa procesů</div>
<div>Stahování videí</div>
<div>Terminál</div>
<div>Vim</div>
<div>Zpracování binárních souborů</div>
</div><p>Tyto kapitoly můžete získat jako odměnu za překlad ze zdrojového kódu. Podrobnější informace <a href="https://github.com/singularis-mzf/linux-spellbook/blob/stabiln%C3%AD/dokumentace/odm%C4%9Bna-za-sestaven%C3%AD.md">na GitHubu</a>.</p>
</div></div>
<a href="#zavritmenu" id="zavritmenu" class="zavritmenu">Zavřít&nbsp;menu</a>
</aside>
<!-- MENU ŠTÍTKY -->
<a href="#menustitky" id="menustitky"><span class="prvnipismeno">Š</span>títky</a>
<aside class="menustitky">
<div><div class="nadpis">Štítky</div><div class="polozky">
<a href="x-stitky.htm#sadresare">adresáře&nbsp;&nbsp;(2)</a>
<a href="x-stitky.htm#saplikace">aplikace&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sapt">apt&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sbash">bash&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sdemoni">démoni&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sflatpak">Flatpak&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sgui">GUI&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#shledani">hledání&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sklavesnice">klávesnice&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#skomprese">komprese&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#slvm">LVM&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sodkladaciprostor">odkládací prostor&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sperl">Perl&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sprogram">program&nbsp;&nbsp;(2)</a>
<a href="x-stitky.htm#sprogramovani">programování&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#spristupovaprava">přístupová práva&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sramdisk">ramdisk&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#ssnap">Snap&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#ssoubory">soubory&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#sspravaverzi">správa verzí&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#ssyntaxe">syntaxe&nbsp;&nbsp;(3)</a>
<a href="x-stitky.htm#ssystem">systém&nbsp;&nbsp;(4)</a>
<a href="x-stitky.htm#ssystemsouboru">systém souborů&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#stematickyokruh">tematický okruh&nbsp;&nbsp;(10)</a>
<a href="x-stitky.htm#svideo">video&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#szip">zip&nbsp;&nbsp;(1)</a>
<a href="x-stitky.htm#szpracovanitextu">zpracování textu&nbsp;&nbsp;(3)</a>
<a href="x-stitky.htm#szvuk">zvuk&nbsp;&nbsp;(1)</a>
</div></div>
<a href="#zavritmenu" class="zavritmenu">Zavřít&nbsp;menu</a>
</aside>
<!-- MENU NÁPOVĚDA -->
<a href="#menunapoveda" id="menunapoveda"><span class="prvnipismeno">N</span>ápověda</a>
<aside class="menunapoveda">
<div><div class="nadpis">Nápověda</div><div class="polozky">
<a href="koncepce-projektu.htm">Koncepce projektu</a>
<a href="https://singularis-mzf.github.io/">Ostatní verze knihy</a>
<a href="https://github.com/singularis-mzf/linux-spellbook">Repozitář na GitHubu</a>
<a href="https://github.com/singularis-mzf/linux-spellbook/blob/stabiln%C3%AD/dokumentace/odm%C4%9Bna-za-sestaven%C3%AD.md">Odměna za sestavení (prémiové kapitoly)</a>
</div></div>
<a href="#zavritmenu" class="zavritmenu">Zavřít&nbsp;menu</a>
</aside>
</nav>

<a href="#nahore" id="odkaznahoru" title="NAHORU − na začátek stránky">▴<!--⤒--></a>
<a href="#dole" id="odkazdolu" title="DOLŮ − na konec stránky">▾<!--⤓--></a>

</div>
</body>
</html>
